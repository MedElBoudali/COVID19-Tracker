{"version":3,"sources":["Reducers/Countries.js","Reducers/CurrentCountry.js","Reducers/DataHistory.js","Reducers/index.js","Actions/Types.js","Actions/Countries.js","Actions/CurrentCountry.js","Actions/DataHistory.js","Components/TopSection/CountriesItem.jsx","Components/TopSection/Countries.jsx","Components/MidSection/ContriesListItem.jsx","Components/MidSection/AllCountriesList.jsx","Components/Map/GlobalMap.jsx","Components/MidSection/CurrentCountryStats.jsx","Components/MidSection/WWStats.jsx","Components/MidSection/MidSectionContainer.jsx","Layouts/Navbar.jsx","Pages/Home.jsx","App.js","index.js"],"names":["initialState","allCountriesData","WWStats","allCountriesSortedByCases","allCountriesloading","allCountriesError","currentCountry","currentCountryLoading","currentCountryError","currentCountryHistory","Dates","Cases","Deaths","Recovered","combineReducers","AllCountries","state","action","type","payload","allCountries","sortedCountriesByCases","CurrentCountryData","DataHistory","Data","setLoading","CountriesItem","data","props","style","width","textAlign","Option","src","countryInfo","flag","className","alt","country","Countries","AllCountriesData","getAllCountries","WWStatsFetch","setCurrentCountry","getCurrentHistory","useEffect","useState","setInputValue","Container","Row","Col","xs","sm","md","lg","xl","Spinner","animation","role","variant","placeholder","options","getOptionLabel","option","getOptionValue","cacheOptions","loadOptions","InputValue","callback","inputValue","filter","c","toLowerCase","includes","filterCountrie","defaultOptions","onInputChange","newValue","replace","onChange","e","updated","lat","long","cases","todayCases","deaths","todayDeaths","recovered","active","critical","tests","components","autoFocus","isClearable","prototype","PropTypes","object","bool","isRequired","func","connect","dispatch","a","fetch","res","ok","status","Error","json","sort","b","message","console","log","Object","entries","timeline","key","value","newDate","split","push","length","ContriesListItem","OverlayTrigger","placement","overlay","Tooltip","id","toString","AllCountriesList","map","array","apiKey","useRef","labels","datasets","label","fill","borderColor","backgroundColor","responsive","maintainAspectRatio","tooltips","enabled","callbacks","tooltipItem","datasetIndex","Math","round","yLabel","scales","xAxes","gridLines","display","yAxes","ticks","beginAtZero","process","GlobalMap","height","viewPort","setViewPort","popupState","setPopupState","latitude","longitude","zoom","transitionDuration","transitionInterpolator","FlyToInterpolator","mapboxApiAccessToken","mapStyle","onViewportChange","offsetTop","offsetLeft","onMouseEnter","name","onMouseLeave","closeButton","onClose","class","moment","fromNow","MidSectionContainer","fluid","NavComp","Navbar","expand","sticky","delay","show","hide","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","window","innerWidth","target","Home","App","middleware","thunk","ReactDOM","render","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","document","getElementById"],"mappings":"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","file":"static/js/main.61fc06cc.chunk.js","sourcesContent":["import {\r\n  GET_ALL_COUNTRIES,\r\n  GET_WWStats,\r\n  SET_ALL_COUNTRIES_LOADING,\r\n  ERROR\r\n} from '../Actions/Types';\r\n\r\nconst initialState = {\r\n  allCountriesData: null,\r\n  WWStats: null,\r\n  allCountriesSortedByCases: null,\r\n  allCountriesloading: false,\r\n  allCountriesError: null\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_ALL_COUNTRIES:\r\n      return {\r\n        ...state,\r\n        allCountriesData: action.payload.allCountries,\r\n        allCountriesSortedByCases: action.payload.sortedCountriesByCases,\r\n        allCountriesloading: false\r\n      };\r\n\r\n    case GET_WWStats:\r\n      return { ...state, WWStats: action.payload, allCountriesloading: false };\r\n\r\n    case SET_ALL_COUNTRIES_LOADING:\r\n      return { ...state, allCountriesloading: true };\r\n\r\n    case ERROR:\r\n      return {\r\n        ...state,\r\n        allCountriesError: action.payload,\r\n        allCountriesloading: false\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import {\r\n  SET_CURRENT_COUNTRY,\r\n  SET_CURRENT_COUNTRY_LOADING,\r\n  SET_CURRENT_COUNTRY_ERROR\r\n} from '../Actions/Types';\r\n\r\nconst initialState = {\r\n  currentCountry: null,\r\n  currentCountryLoading: false,\r\n  currentCountryError: null\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_CURRENT_COUNTRY:\r\n      return {\r\n        ...state,\r\n        currentCountry: action.payload,\r\n        currentCountryLoading: false\r\n      };\r\n\r\n    case SET_CURRENT_COUNTRY_LOADING:\r\n      return { ...state, currentCountryLoading: true };\r\n\r\n    case SET_CURRENT_COUNTRY_ERROR:\r\n      return {\r\n        ...state,\r\n        currentCountryError: action.payload,\r\n        currentCountryLoading: false\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import {\r\n  GET_HiSTORY_CURRENT_COUNTRY,\r\n  SET_HiSTORY_CURRENT_COUNTRY_LOADING,\r\n  SET_HiSTORY_CURRENT_COUNTRY_ERROR\r\n} from '../Actions/Types';\r\n\r\nconst initialState = {\r\n  currentCountryHistory: null,\r\n  Dates: null,\r\n  Cases: null,\r\n  Deaths: null,\r\n  Recovered: null,\r\n  currentCountryLoading: false,\r\n  currentCountryError: null\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_HiSTORY_CURRENT_COUNTRY:\r\n      return {\r\n        ...state,\r\n        currentCountryHistory: action.payload.Data,\r\n        Dates: action.payload.Dates,\r\n        Cases: action.payload.Cases,\r\n        Deaths: action.payload.Deaths,\r\n        Recovered: action.payload.Recovered,\r\n        currentCountryLoading: false\r\n      };\r\n\r\n    case SET_HiSTORY_CURRENT_COUNTRY_LOADING:\r\n      return { ...state, currentCountryLoading: true };\r\n\r\n    case SET_HiSTORY_CURRENT_COUNTRY_ERROR:\r\n      return {\r\n        ...state,\r\n        currentCountryError: action.payload,\r\n        currentCountryLoading: false\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport AllCountries from './Countries';\r\nimport CurrentCountryData from './CurrentCountry';\r\nimport DataHistory from './DataHistory';\r\n\r\nexport default combineReducers({\r\n  AllCountries,\r\n  CurrentCountryData,\r\n  DataHistory\r\n});\r\n","// Countries\r\nexport const GET_ALL_COUNTRIES = 'GET_ALL_COUNTRIES';\r\nexport const GET_WWStats = 'GET_WWStats';\r\nexport const SET_ALL_COUNTRIES_LOADING = 'SET_ALL_COUNTRIES_LOADING';\r\nexport const ERROR = 'ERROR';\r\n//Current\r\nexport const SET_CURRENT_COUNTRY = 'SET_CURRENT_COUNTRY';\r\nexport const SET_CURRENT_COUNTRY_LOADING = 'SET_CURRENT_COUNTRY_LOADING';\r\nexport const SET_CURRENT_COUNTRY_ERROR = 'SET_CURRENT_COUNTRY_ERROR';\r\n//History\r\nexport const GET_HiSTORY_CURRENT_COUNTRY = 'GET_HiSTORY_CURRENT_COUNTRY';\r\nexport const SET_HiSTORY_CURRENT_COUNTRY_LOADING =\r\n  'SET_HiSTORY_CURRENT_COUNTRY_LOADING';\r\nexport const SET_HiSTORY_CURRENT_COUNTRY_ERROR =\r\n  'SET_HiSTORY_CURRENT_COUNTRY_ERROR';\r\n","import {\r\n  GET_ALL_COUNTRIES,\r\n  GET_WWStats,\r\n  SET_ALL_COUNTRIES_LOADING,\r\n  ERROR\r\n} from './Types';\r\n\r\n// Get All Countries\r\nexport const getAllCountries = () => async dispatch => {\r\n  try {\r\n    setLoading();\r\n    const res = await fetch('https://corona.lmao.ninja/v2/countries');\r\n    if (!res.ok) {\r\n      dispatch({\r\n        type: ERROR,\r\n        payload: `HTTP Status: ${res.status}`\r\n      });\r\n      throw new Error(`HTTP Status: ${res.status}`);\r\n    }\r\n    const data = await res.json();\r\n    const sortedCountriesByCases = [...data].sort((a, b) => {\r\n      return b.cases - a.cases;\r\n    });\r\n    dispatch({\r\n      type: GET_ALL_COUNTRIES,\r\n      payload: { allCountries: data, sortedCountriesByCases }\r\n    });\r\n  } catch (err) {\r\n    dispatch({ type: ERROR, payload: err.message });\r\n  }\r\n};\r\n\r\nexport const WWStatsFetch = () => async dispatch => {\r\n  try {\r\n    setLoading();\r\n    const res = await fetch('https://corona.lmao.ninja/v2/all');\r\n    dispatch({ type: GET_WWStats, payload: await res.json() });\r\n  } catch (err) {\r\n    dispatch({ type: ERROR, payload: err.message });\r\n  }\r\n};\r\n\r\nexport const setLoading = () => {\r\n  return { type: SET_ALL_COUNTRIES_LOADING };\r\n};\r\n","import {\r\n  SET_CURRENT_COUNTRY,\r\n  SET_CURRENT_COUNTRY_LOADING,\r\n  SET_CURRENT_COUNTRY_ERROR\r\n} from './Types';\r\n\r\nexport const setCurrentCountry = country => {\r\n  setLoading();\r\n  return { type: SET_CURRENT_COUNTRY, payload: country };\r\n};\r\n\r\nexport const setLoading = () => {\r\n  return { type: SET_CURRENT_COUNTRY_LOADING };\r\n};\r\n","import {\r\n  GET_HiSTORY_CURRENT_COUNTRY,\r\n  SET_HiSTORY_CURRENT_COUNTRY_LOADING,\r\n  SET_HiSTORY_CURRENT_COUNTRY_ERROR\r\n} from './Types';\r\n\r\nexport const getCurrentHistory = country => async dispatch => {\r\n  console.log(country);\r\n\r\n  let Dates = [];\r\n  let Cases = [];\r\n  let Deaths = [];\r\n  let Recovered = [];\r\n\r\n  try {\r\n    setLoading();\r\n    const res = await fetch(\r\n      `https://corona.lmao.ninja/v2/historical/${country}`\r\n    );\r\n    if (!res.ok) {\r\n      dispatch({\r\n        type: SET_HiSTORY_CURRENT_COUNTRY_ERROR,\r\n        payload: `HTTP Status: ${res.status}`\r\n      });\r\n      throw new Error(`HTTP Status: ${res.status}`);\r\n    } else {\r\n      const Data = await res.json();\r\n      for (let [key, value] of Object.entries(Data.timeline.cases)) {\r\n        let newDate = key.split('/');\r\n        Dates.push(`${newDate[1]}/${newDate[0]}`);\r\n        Cases.push(value);\r\n      }\r\n      for (let [key, value] of Object.entries(Data.timeline.deaths)) {\r\n        Deaths.push(value);\r\n      }\r\n      for (let [key, value] of Object.entries(Data.timeline.recovered)) {\r\n        Recovered.push(value);\r\n      }\r\n      if (\r\n        Dates.length > 0 &&\r\n        Cases.length > 0 &&\r\n        Deaths.length > 0 &&\r\n        Recovered.length > 0\r\n      ) {\r\n        dispatch({\r\n          type: GET_HiSTORY_CURRENT_COUNTRY,\r\n          payload: { Data, Dates, Cases, Deaths, Recovered }\r\n        });\r\n      }\r\n    }\r\n  } catch (err) {\r\n    dispatch({ type: SET_HiSTORY_CURRENT_COUNTRY_ERROR, payload: err.message });\r\n  }\r\n};\r\n\r\nexport const setLoading = () => {\r\n  return { type: SET_HiSTORY_CURRENT_COUNTRY_LOADING };\r\n};\r\n","import React from 'react';\r\nimport { components } from 'react-select';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CountriesItem = ({ data, ...props }) => {\r\n  return (\r\n    <div style={{ width: '100% !important', textAlign: 'left !important' }}>\r\n      <components.Option {...props}>\r\n        <img src={data.countryInfo.flag} className='flag' alt={data.country} />\r\n        {data.country}\r\n      </components.Option>\r\n    </div>\r\n  );\r\n};\r\n\r\nCountriesItem.propTypes = {\r\n  data: PropTypes.object.isRequired\r\n};\r\n\r\nexport default CountriesItem;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getAllCountries, WWStatsFetch } from '../../Actions/Countries';\r\nimport { setCurrentCountry } from '../../Actions/CurrentCountry';\r\nimport { getCurrentHistory } from '../../Actions/DataHistory';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport AsyncSelect from 'react-select/async';\r\nimport CountriesItem from './CountriesItem';\r\nimport PropTypes from 'prop-types';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nconst Countries = ({\r\n  AllCountriesData: { allCountriesData, allCountriesloading },\r\n  getAllCountries,\r\n  WWStatsFetch,\r\n  setCurrentCountry,\r\n  getCurrentHistory\r\n}) => {\r\n  useEffect(() => {\r\n    getAllCountries();\r\n    WWStatsFetch();\r\n  }, [getAllCountries, WWStatsFetch]);\r\n\r\n  const [, setInputValue] = useState('');\r\n\r\n  const filterCountrie = inputValue => {\r\n    if (!allCountriesloading && allCountriesData !== null)\r\n      return allCountriesData.filter(c =>\r\n        c.country.toLowerCase().includes(inputValue.toLowerCase())\r\n      );\r\n  };\r\n\r\n  const loadOptions = (InputValue, callback) => {\r\n    callback(filterCountrie(InputValue));\r\n  };\r\n\r\n  const handleInputChange = newValue => {\r\n    const inputValue = newValue.replace(/\\W/g, '');\r\n    setInputValue({ inputValue });\r\n    return inputValue;\r\n  };\r\n\r\n  const onChange = e => {\r\n    if (e !== null) {\r\n      const {\r\n        updated,\r\n        country,\r\n        countryInfo: { flag, lat, long },\r\n        cases,\r\n        todayCases,\r\n        deaths,\r\n        todayDeaths,\r\n        recovered,\r\n        active,\r\n        critical,\r\n        tests\r\n      } = e;\r\n      //   Set Current country\r\n      setCurrentCountry({\r\n        updated,\r\n        country,\r\n        flag,\r\n        lat,\r\n        long,\r\n        cases,\r\n        todayCases,\r\n        deaths,\r\n        todayDeaths,\r\n        recovered,\r\n        active,\r\n        critical,\r\n        tests\r\n      });\r\n\r\n      getCurrentHistory(country);\r\n    } else {\r\n      setCurrentCountry(null);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col xs='12' sm='12' md='12' lg='12' xl='12'>\r\n          <div className='countriesSection'>\r\n            <div className='countriesDopdown'>\r\n              {/* <p>Selected Country: {`${SelectedCountry}`}</p> */}\r\n              {allCountriesloading || allCountriesData === null ? (\r\n                <div className='Spinner'>\r\n                  <Spinner animation='border' role='status' variant='success'>\r\n                    <span className='sr-only'>Loading...</span>\r\n                  </Spinner>\r\n                </div>\r\n              ) : (\r\n                <div>\r\n                  <AsyncSelect\r\n                    placeholder='Search or Select Country ...'\r\n                    options={allCountriesData}\r\n                    getOptionLabel={option => {\r\n                      return (\r\n                        <div>\r\n                          <img\r\n                            src={option.countryInfo.flag}\r\n                            className='flag'\r\n                            alt={option.country}\r\n                          />\r\n                          {`${option.country}`}\r\n                        </div>\r\n                      );\r\n                    }}\r\n                    getOptionValue={option => option}\r\n                    cacheOptions\r\n                    loadOptions={loadOptions}\r\n                    defaultOptions\r\n                    onInputChange={handleInputChange}\r\n                    onChange={onChange}\r\n                    components={{ Option: CountriesItem }}\r\n                    className='searchBox'\r\n                    autoFocus={true}\r\n                    isClearable={true}\r\n                    // menuIsOpen={true}\r\n                  />\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nCountries.prototype = {\r\n  allCountriesData: PropTypes.object,\r\n  allCountriesloading: PropTypes.bool.isRequired,\r\n  getAllCountries: PropTypes.func.isRequired,\r\n  setCurrentCountry: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  AllCountriesData: state.AllCountries\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  getAllCountries,\r\n  WWStatsFetch,\r\n  setCurrentCountry,\r\n  getCurrentHistory\r\n})(Countries);\r\n","import React from 'react';\r\nimport moment from 'moment';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ContriesListItem = ({\r\n  country: {\r\n    updated,\r\n    country,\r\n    countryInfo: { flag },\r\n    cases,\r\n    todayCases,\r\n    deaths,\r\n    todayDeaths,\r\n    recovered,\r\n    active,\r\n    critical,\r\n    tests\r\n  }\r\n}) => {\r\n  return (\r\n    <div className='CountryListItem'>\r\n      <div className='flagAndTitle'>\r\n        <img src={flag} alt={country} />\r\n        <p className='CountryName'>{country}</p>\r\n      </div>\r\n\r\n      <div className='CDR'>\r\n        <OverlayTrigger\r\n          key='Cases'\r\n          placement='bottom'\r\n          overlay={\r\n            <Tooltip className='myToolTip' id='tooltip-bottom'>\r\n              Confirmed Cases\r\n            </Tooltip>\r\n          }>\r\n          <div className='Cases'>\r\n            <i className='fas fa-users'></i>\r\n            {cases.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}\r\n            {todayCases > 0 && (\r\n              <span className='todayResults'>\r\n                +\r\n                {todayCases\r\n                  .toString()\r\n                  .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}\r\n              </span>\r\n            )}\r\n          </div>\r\n        </OverlayTrigger>\r\n\r\n        <OverlayTrigger\r\n          key='Deaths'\r\n          placement='bottom'\r\n          overlay={\r\n            <Tooltip className='myToolTip' id='tooltip-bottom'>\r\n              Confirmed Deaths\r\n            </Tooltip>\r\n          }>\r\n          <div className='Deaths'>\r\n            <i className='fas fa-skull'></i>\r\n            {deaths.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}\r\n            {todayDeaths > 0 && (\r\n              <span className='todayResults'>\r\n                +\r\n                {todayDeaths\r\n                  .toString()\r\n                  .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}\r\n              </span>\r\n            )}\r\n          </div>\r\n        </OverlayTrigger>\r\n\r\n        <OverlayTrigger\r\n          key='Recovered'\r\n          placement='bottom'\r\n          overlay={\r\n            <Tooltip className='myToolTip' id='tooltip-bottom'>\r\n              Confirmed Recovered\r\n            </Tooltip>\r\n          }>\r\n          <div className='Recovered'>\r\n            <i className='fas fa-hospital-user'></i>\r\n            {recovered.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}\r\n          </div>\r\n        </OverlayTrigger>\r\n\r\n        <OverlayTrigger\r\n          key='Tests'\r\n          placement='bottom'\r\n          overlay={\r\n            <Tooltip className='myToolTip' id='tooltip-bottom'>\r\n              Confirmed Tests\r\n            </Tooltip>\r\n          }>\r\n          <div className='Tests'>\r\n            <i className='fas fa-vial'></i>\r\n            {tests.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}\r\n          </div>\r\n        </OverlayTrigger>\r\n\r\n        {/* <p className='lastUpdateList'>\r\n          <i className='far fa-clock' />\r\n          Last update:<span>{moment(updated).fromNow()}.</span>\r\n        </p> */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nContriesListItem.propTypes = {\r\n  country: PropTypes.object.isRequired\r\n};\r\n\r\nexport default ContriesListItem;\r\n","import React, { Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ContriesListItem from './ContriesListItem';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AllCountriesList = ({\r\n  AllCountriesData: {\r\n    allCountriesData,\r\n    allCountriesSortedByCases,\r\n    allCountriesloading\r\n  }\r\n}) => {\r\n  return (\r\n    <>\r\n      {allCountriesData === null || allCountriesloading ? (\r\n        <div className='Spinner'>\r\n          <Spinner animation='border' role='status' variant='success'>\r\n            <span className='sr-only'>Loading...</span>\r\n          </Spinner>\r\n        </div>\r\n      ) : (\r\n        <div className='AllCountriesList'>\r\n          {allCountriesSortedByCases.map((country, id) => (\r\n            <ContriesListItem country={country} key={id} id={id} />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nAllCountriesList.prototype = {\r\n  allCountriesData: PropTypes.array,\r\n  allCountriesSortedByCases: PropTypes.array,\r\n  allCountriesloading: PropTypes.bool.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  AllCountriesData: state.AllCountries\r\n});\r\n\r\nexport default connect(mapStateToProps)(AllCountriesList);\r\n","import React, { useState, useEffect, Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ReactMapGL, { FlyToInterpolator, Marker, Popup } from 'react-map-gl';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport PropTypes from 'prop-types';\r\n\r\nlet apiKey;\r\nprocess.env.NODE_ENV\r\n  ? (apiKey = process.env.REACT_APP_API_KEY)\r\n  : (apiKey = process.env.API_KEY);\r\n\r\nconst GlobalMap = ({\r\n  CurrentCountryData: { currentCountry, currentCountryLoading },\r\n  AllCountriesData: { allCountriesData, allCountriesloading }\r\n}) => {\r\n  const [viewPort, setViewPort] = useState({\r\n    width: '100%',\r\n    height: '100%'\r\n  });\r\n  const [popupState, setPopupState] = useState({\r\n    state: false,\r\n    lat: 16,\r\n    long: 27\r\n  });\r\n\r\n  useEffect(() => {\r\n    currentCountry !== null && !currentCountryLoading\r\n      ? setViewPort({\r\n          ...viewPort,\r\n          latitude: currentCountry.lat,\r\n          longitude: currentCountry.long,\r\n          zoom: 3.5,\r\n          transitionDuration: 3000,\r\n          transitionInterpolator: new FlyToInterpolator()\r\n        })\r\n      : setViewPort({\r\n          ...viewPort,\r\n          latitude: 16,\r\n          longitude: 27,\r\n          zoom: 1.3,\r\n          transitionDuration: 3000,\r\n          transitionInterpolator: new FlyToInterpolator()\r\n        });\r\n    // eslint-disable-next-line\r\n  }, [currentCountry, currentCountryLoading]);\r\n\r\n  return (\r\n    <Fragment>\r\n      {allCountriesData === null || allCountriesloading ? (\r\n        <div className='Spinner'>\r\n          <Spinner animation='border' role='status' variant='success'>\r\n            <span className='sr-only'>Loading...</span>\r\n          </Spinner>\r\n        </div>\r\n      ) : (\r\n          <ReactMapGL\r\n            className='map'\r\n            {...viewPort}\r\n            mapboxApiAccessToken={apiKey}\r\n            mapStyle='mapbox://styles/mapbox/dark-v10'\r\n            onViewportChange={viewPort => {\r\n              setViewPort(viewPort);\r\n            }}>\r\n            {allCountriesData.map((country, id) => (\r\n              <Marker\r\n                key={id}\r\n                latitude={country.countryInfo.lat}\r\n                longitude={country.countryInfo.long}\r\n                offsetTop={-15}\r\n                offsetLeft={-5}>\r\n                <i\r\n                  className='fas fa-circle circle'\r\n                  onMouseEnter={() =>\r\n                    setPopupState({\r\n                      state: true,\r\n                      name: country.country,\r\n                      flag: country.countryInfo.flag,\r\n                      cases: country.cases,\r\n                      deaths: country.deaths,\r\n                      recovered: country.recovered,\r\n                      lat: country.countryInfo.lat,\r\n                      long: country.countryInfo.long\r\n                    })\r\n                  }\r\n                  onMouseLeave={() =>\r\n                    setPopupState({ ...popupState, state: false })\r\n                  }></i>\r\n              </Marker>\r\n            ))}\r\n            {popupState.state && (\r\n              <Popup\r\n                latitude={popupState.lat}\r\n                longitude={popupState.long}\r\n                closeButton={false}\r\n                offsetTop={-10}\r\n                offsetLeft={-5}\r\n                className='popupup'\r\n                onClose={() => {\r\n                  setPopupState({ ...popupState, state: false });\r\n                }}>\r\n                <div>\r\n                  <h6 className='popupHeader'>\r\n                    <img\r\n                      src={popupState.flag}\r\n                      alt='flag'\r\n                      style={{ width: '60px' }}\r\n                    />\r\n                    {popupState.name}\r\n                  </h6>\r\n                  <p className='popupCases'>\r\n                    Cases:{' '}\r\n                    {popupState.cases\r\n                      .toString()\r\n                      .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}\r\n                  </p>\r\n                  <p className='popupDeaths'>\r\n                    Deaths:{' '}\r\n                    {popupState.deaths\r\n                      .toString()\r\n                      .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}\r\n                  </p>\r\n                  <p className='popupRecovered'>\r\n                    Recovered:{' '}\r\n                    {popupState.recovered\r\n                      .toString()\r\n                      .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}\r\n                  </p>\r\n                </div>\r\n              </Popup>\r\n            )}\r\n          </ReactMapGL>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nGlobalMap.prototype = {\r\n  currentCountry: PropTypes.object,\r\n  currentCountryLoading: PropTypes.bool,\r\n  allCountriesData: PropTypes.object,\r\n  allCountriesloading: PropTypes.bool\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  CurrentCountryData: state.CurrentCountryData,\r\n  AllCountriesData: state.AllCountries\r\n});\r\n\r\nexport default connect(mapStateToProps)(GlobalMap);\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport { connect } from 'react-redux';\r\n// import Chart from 'chart.js';\r\nimport { Line } from 'react-chartjs-2';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CurrentCountryStats = ({\r\n  // CurrentCountryData: { currentCountry, currentCountryLoading },\r\n  DataHistory: { Dates, Cases, Deaths, Recovered, currentCountryLoading }\r\n}) => {\r\n  const chartContainer = useRef(null);\r\n  const [chartInstance, setChartInstance] = useState(null);\r\n\r\n  return (\r\n    // <canvas id='chartJS' />\r\n    <>\r\n      {currentCountryLoading || Dates === null ? (\r\n        <div className='Spinner'>\r\n          <Spinner animation='border' role='status' variant='success'>\r\n            <span className='sr-only'>Loading...</span>\r\n          </Spinner>\r\n        </div>\r\n      ) : (\r\n        <Line\r\n          className='Line'\r\n          data={{\r\n            labels: Dates,\r\n            datasets: [\r\n              {\r\n                // radius: 0,\r\n                label: \"Cases\",\r\n                data: Cases,\r\n                fill: false,\r\n                borderColor: '#fca903',\r\n                backgroundColor: '#fca903'\r\n              },\r\n              {\r\n                label: 'Deaths',\r\n                data: Deaths,\r\n                fill: false,\r\n                borderColor: '#d14356',\r\n                backgroundColor: '#d14356'\r\n              },\r\n              {\r\n                label: 'Recovered',\r\n                data: Recovered,\r\n                fill: false,\r\n                borderColor: '#49d170',\r\n                backgroundColor: '#49d170'\r\n              }\r\n            ]\r\n          }}\r\n          options={{\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n            tooltips: {\r\n              enabled: true,\r\n              callbacks: {\r\n                label: (tooltipItem, data) => {\r\n                  var label =\r\n                    data.datasets[tooltipItem.datasetIndex].label || '';\r\n\r\n                  if (label) {\r\n                    label += ':';\r\n                  }\r\n                  label += Math.round(tooltipItem.yLabel * 100) / 100;\r\n                  return label;\r\n                }\r\n              }\r\n            },\r\n            scales: {\r\n              xAxes: [\r\n                {\r\n                  gridLines: {\r\n                    display: false\r\n                  }\r\n                }\r\n              ],\r\n              yAxes: [\r\n                {\r\n                  gridLines: {\r\n                    display: true\r\n                  },\r\n                  ticks: {\r\n                    beginAtZero: true\r\n                  }\r\n                }\r\n              ]\r\n            }\r\n          }}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nCurrentCountryStats.propTypes = {\r\n  currentCountry: PropTypes.object\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  CurrentCountryData: state.CurrentCountryData,\r\n  DataHistory: state.DataHistory\r\n});\r\n\r\nexport default connect(mapStateToProps)(CurrentCountryStats);\r\n","import React from 'react';\r\nimport moment from 'moment';\r\nimport { connect } from 'react-redux';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\n\r\nconst WWStats = ({ AllCountriesData: { WWStats, allCountriesloading } }) => {\r\n  let {\r\n    updated,\r\n    cases,\r\n    todayCases,\r\n    deaths,\r\n    todayDeaths,\r\n    recovered,\r\n    active,\r\n    critical,\r\n    tests\r\n  } = WWStats || {};\r\n\r\n  return (\r\n    <div className='WWStats'>\r\n      {WWStats === null || allCountriesloading ? (\r\n        <div className='Spinner'>\r\n          <Spinner animation='border' role='status' variant='success'>\r\n            <span className='sr-only'>Loading...</span>\r\n          </Spinner>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <h1 className='WWStatsHeader'>\r\n            <i class='fas fa-globe'></i> Coronavirus World Stats\r\n          </h1>\r\n          <div className='WCDR'>\r\n            <OverlayTrigger\r\n              key='Cases'\r\n              placement='bottom'\r\n              overlay={\r\n                <Tooltip className='myToolTip' id='tooltip-bottom'>\r\n                  Confirmed Cases\r\n                </Tooltip>\r\n              }>\r\n              <div className='WWCases'>\r\n                <p className='WWIcons'>\r\n                  <i className='fas fa-users'></i> Cases\r\n                </p>\r\n                {cases.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}\r\n                {todayCases > 0 && (\r\n                  <span className='WWtodayResults'>\r\n                    +\r\n                    {todayCases\r\n                      .toString()\r\n                      .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}\r\n                  </span>\r\n                )}\r\n              </div>\r\n            </OverlayTrigger>\r\n\r\n            <OverlayTrigger\r\n              key='Deaths'\r\n              placement='bottom'\r\n              overlay={\r\n                <Tooltip className='myToolTip' id='tooltip-bottom'>\r\n                  Confirmed Deaths\r\n                </Tooltip>\r\n              }>\r\n              <div className='WWDeaths'>\r\n                <p className='WWIcons'>\r\n                  <i className='fas fa-skull'></i> Deaths\r\n                </p>\r\n                {deaths.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}\r\n                {todayDeaths > 0 && (\r\n                  <span className='WWtodayResults'>\r\n                    +\r\n                    {todayDeaths\r\n                      .toString()\r\n                      .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}\r\n                  </span>\r\n                )}\r\n              </div>\r\n            </OverlayTrigger>\r\n\r\n            <OverlayTrigger\r\n              key='Recovered'\r\n              placement='bottom'\r\n              overlay={\r\n                <Tooltip className='myToolTip' id='tooltip-bottom'>\r\n                  Confirmed Recovered\r\n                </Tooltip>\r\n              }>\r\n              <div className='WWRecovered'>\r\n                <p className='WWIcons'>\r\n                  <i className='fas fa-hospital-user'></i> Recovered\r\n                </p>\r\n                {recovered.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}\r\n              </div>\r\n            </OverlayTrigger>\r\n\r\n            <OverlayTrigger\r\n              key='Tests'\r\n              placement='bottom'\r\n              overlay={\r\n                <Tooltip className='myToolTip' id='tooltip-bottom'>\r\n                  Confirmed Tests\r\n                </Tooltip>\r\n              }>\r\n              <div className='WWTests'>\r\n                <p className='WWIcons'>\r\n                  <i className='fas fa-vial'></i> Tests\r\n                </p>\r\n                {tests.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}\r\n              </div>\r\n            </OverlayTrigger>\r\n          </div>\r\n          <p className='lastUpdate'>\r\n            <i className='far fa-clock' />\r\n            Last update:\r\n            <span>{updated > 0 && moment(updated).fromNow()}.</span>\r\n          </p>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  AllCountriesData: state.AllCountries\r\n});\r\n\r\nexport default connect(mapStateToProps)(WWStats);\r\n","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport AllCountriesList from './AllCountriesList';\r\nimport CurrentCountryStats from './CurrentCountryStats';\r\nimport GlobalMap from '../Map/GlobalMap';\r\nimport WWStats from './WWStats';\r\n\r\nconst MidSectionContainer = () => {\r\n  return (\r\n    <Container className='MidSection' fluid>\r\n      <Row>\r\n        <Col xs='12' sm='12' md='12' lg='12' xl='12'>\r\n          <WWStats />\r\n        </Col>\r\n      </Row>\r\n      <Row className='rowPadding'>\r\n        <Col xs='12' sm='12' md='8' lg='8' xl='8' className='noPadding'>\r\n          <p className='mapHeader'>\r\n            <i className='fas fa-globe-africa'></i>Coronavirus World Map\r\n          </p>\r\n          <div className='GlobalMap'>\r\n            <GlobalMap />\r\n          </div>\r\n        </Col>\r\n        <Col xs='12' sm='12' md='4' lg='4' xl='4' className='noPadding'>\r\n          <p className='countriesListHeader'>\r\n            <i class='far fa-flag'></i>All Countries Stats\r\n          </p>\r\n          <div className='countriesListContainer'>\r\n            <AllCountriesList />\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col xs='12' sm='12' md='6' lg='7' xl='7'>\r\n          <div className='currentCountryStats'>\r\n            <CurrentCountryStats />\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default MidSectionContainer;\r\n","import React, { useEffect } from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Container from 'react-bootstrap/Container';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\n\r\nconst NavComp = () => {\r\n  useEffect(() => {\r\n\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <Navbar className='Navbar' variant='light' expand='lg' sticky='top'>\r\n        <Container>\r\n          <OverlayTrigger\r\n            placement='bottom'\r\n            delay={{ show: 150, hide: 150 }}\r\n            overlay={<Tooltip className='myToolTip'>Covid-19 Update</Tooltip>}>\r\n            <Navbar.Brand href='#home' className='title'>\r\n              <i className='fas fa-lungs-virus' /> Covid-19 Update\r\n            </Navbar.Brand>\r\n          </OverlayTrigger>\r\n\r\n          <Navbar.Toggle aria-controls='basic-navbar-nav' />\r\n          <Navbar.Collapse id='basic-navbar-nav'>\r\n            <Nav className='mr-auto justify-content-end navWidth'>\r\n              <Nav.Link href='#home'>\r\n                <i className='fas fa-home navIcons'></i>\r\n                {window.innerWidth<992 && <span className=\"navIconsSpan\">Home</span>}\r\n              </Nav.Link>\r\n              <OverlayTrigger\r\n                placement='bottom'\r\n                delay={{ show: 150, hide: 150 }}\r\n                overlay={\r\n                  <Tooltip className='myToolTip'>Github Repositorie</Tooltip>\r\n                }>\r\n                <Nav.Link\r\n                  href='https://github.com/MedElBoudali/Coronavirus-Update'\r\n                  target='_blank'>\r\n                  <i className='fab fa-github navIcons'></i>\r\n                  {window.innerWidth<992 && <span className=\"navIconsSpan\">Github Repositorie</span>}\r\n                </Nav.Link>\r\n              </OverlayTrigger>\r\n\r\n              <OverlayTrigger\r\n                placement='bottom'\r\n                delay={{ show: 150, hide: 150 }}\r\n                overlay={\r\n                  <Tooltip className='myToolTip'>\r\n                    World Health Organization\r\n                  </Tooltip>\r\n                }>\r\n                <Nav.Link href='https://www.who.int/' target='_blank'>\r\n                  <i className='fas fa-laptop-medical navIcons'></i>\r\n                  {window.innerWidth<992 && <span className=\"navIconsSpan\">World Health Organization</span>}\r\n                </Nav.Link>\r\n              </OverlayTrigger>\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavComp;\r\n","import React, { Fragment } from 'react';\r\nimport Countries from '../Components/TopSection/Countries';\r\nimport MidSectionContainer from '../Components/MidSection/MidSectionContainer';\r\nimport Navbar from '../Layouts/Navbar';\r\n\r\nconst Home = () => {\r\n  return (\r\n    <Fragment>\r\n      <Navbar />\r\n        <Countries />\r\n        <MidSectionContainer />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\nimport Home from './Pages/Home';\n\nfunction App() {\n  return <Home />;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './Reducers';\nimport './Assets/Style/App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nReactDOM.render(\n  <Provider\n    store={createStore(\n      rootReducer,\n      initialState,\n      composeWithDevTools(applyMiddleware(...middleware))\n    )}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
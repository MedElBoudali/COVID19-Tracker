{"version":3,"sources":["Reducers/Countries.js","Reducers/CurrentCountry.js","Reducers/DataHistory.js","Reducers/index.js","Actions/Types.js","Actions/Countries.js","Actions/CurrentCountry.js","Actions/DataHistory.js","Components/TopSection/CountriesItem.jsx","Components/TopSection/Countries.jsx","Components/MidSection/ContriesListItem.jsx","Components/MidSection/AllCountriesList.jsx","Components/Map/GlobalMap.jsx","Components/Charts/CurrentCountryLineItem.jsx","Components/Charts/CurrentCountryLine.jsx","Components/Charts/CurrentCountryBarItem.jsx","Components/Charts/CurrentCountryBar.jsx","Components/Charts/PieChartItem.jsx","Components/Charts/PieChart.jsx","Components/MidSection/WWStatesChild.jsx","Components/MidSection/WWStats.jsx","Components/MidSection/MidSectionContainer.jsx","Layouts/Navbar.jsx","Pages/Home.jsx","App.js","index.js"],"names":["initialState","allCountriesData","WWStats","allCountriesSortedByCases","allCountriesloading","allCountriesError","currentCountry","currentCountryLoading","currentCountryError","currentCountryHistory","Dates","Cases","Deaths","Recovered","WWDataHistory","WWDates","WWCases","WWDeaths","WWRecovered","combineReducers","AllCountries","state","action","type","payload","allCountries","sortedCountriesByCases","CurrentCountryData","DataHistory","Data","setLoading","CountriesItem","data","props","style","width","textAlign","Option","src","countryInfo","flag","className","alt","country","Countries","AllCountriesData","getAllCountries","WWStatsFetch","setCurrentCountry","getCurrentHistory","getWWHistory","clearCurrentHistory","useEffect","useState","setInputValue","Container","Row","Col","xs","sm","md","lg","xl","Spinner","animation","role","variant","placeholder","options","getOptionLabel","option","getOptionValue","cacheOptions","loadOptions","InputValue","callback","inputValue","filter","c","toLowerCase","includes","filterCountrie","defaultOptions","onInputChange","newValue","replace","onChange","e","updated","lat","long","cases","todayCases","deaths","todayDeaths","recovered","active","critical","tests","components","autoFocus","isClearable","prototype","PropTypes","object","bool","isRequired","func","connect","dispatch","a","fetch","res","ok","status","Error","json","sort","b","message","Object","entries","timeline","key","value","newDate","split","push","length","ContriesListItem","OverlayTrigger","placement","overlay","Tooltip","id","toString","AllCountriesList","map","array","apiKey","labels","datasets","label","fill","borderColor","backgroundColor","responsive","maintainAspectRatio","title","display","text","legend","position","usePointStyle","fontColor","tooltips","enabled","borderWidth","titleFontColor","bodyFontColor","callbacks","tooltipItem","datasetIndex","Math","round","yLabel","scales","xAxes","gridLines","ticks","fontSize","yAxes","beginAtZero","setDataHistory","CurrentCountryBarItem","radius","getDateHistory","PieChartItem","setDatas","getDatas","process","GlobalMap","height","scrollZoom","boxZoom","doubleClickZoom","viewPort","setViewPort","dragPan","dragRotate","touchZoom","touchRotate","keyboard","settings","popupState","setPopupState","latitude","longitude","zoom","transitionDuration","transitionInterpolator","FlyToInterpolator","mapboxApiAccessToken","mapStyle","onViewportChange","offsetTop","offsetLeft","onMouseEnter","name","onMouseLeave","closeButton","onClose","WWStatesChild","moment","fromNow","MidSectionContainer","fluid","NavComp","Navbar","expand","sticky","delay","show","hide","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","window","innerWidth","target","Home","App","middleware","thunk","ReactDOM","render","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","document","getElementById"],"mappings":"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","file":"static/js/main.8e0a5ceb.chunk.js","sourcesContent":["import {\r\n  GET_ALL_COUNTRIES,\r\n  GET_WWStats,\r\n  SET_ALL_COUNTRIES_LOADING,\r\n  ERROR\r\n} from '../Actions/Types';\r\n\r\nconst initialState = {\r\n  allCountriesData: null,\r\n  WWStats: null,\r\n  allCountriesSortedByCases: null,\r\n  allCountriesloading: false,\r\n  allCountriesError: null\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_ALL_COUNTRIES:\r\n      return {\r\n        ...state,\r\n        allCountriesData: action.payload.allCountries,\r\n        allCountriesSortedByCases: action.payload.sortedCountriesByCases,\r\n        allCountriesloading: false\r\n      };\r\n\r\n    case GET_WWStats:\r\n      return { ...state, WWStats: action.payload, allCountriesloading: false };\r\n\r\n    case SET_ALL_COUNTRIES_LOADING:\r\n      return { ...state, allCountriesloading: true };\r\n\r\n    case ERROR:\r\n      return {\r\n        ...state,\r\n        allCountriesError: action.payload,\r\n        allCountriesloading: false\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import {\r\n  SET_CURRENT_COUNTRY,\r\n  SET_CURRENT_COUNTRY_LOADING,\r\n  SET_CURRENT_COUNTRY_ERROR\r\n} from '../Actions/Types';\r\n\r\nconst initialState = {\r\n  currentCountry: null,\r\n  currentCountryLoading: false,\r\n  currentCountryError: null\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_CURRENT_COUNTRY:\r\n      return {\r\n        ...state,\r\n        currentCountry: action.payload,\r\n        currentCountryLoading: false\r\n      };\r\n\r\n    case SET_CURRENT_COUNTRY_LOADING:\r\n      return { ...state, currentCountryLoading: true };\r\n\r\n    case SET_CURRENT_COUNTRY_ERROR:\r\n      return {\r\n        ...state,\r\n        currentCountryError: action.payload,\r\n        currentCountryLoading: false\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import {\r\n  GET_HiSTORY_CURRENT_COUNTRY,\r\n  GET_WW_DATA_HISTORY,\r\n  CLEAR_CURRENT_COUNTRY,\r\n  SET_HiSTORY_CURRENT_COUNTRY_LOADING,\r\n  SET_HiSTORY_CURRENT_COUNTRY_ERROR\r\n} from '../Actions/Types';\r\n\r\nconst initialState = {\r\n  currentCountryHistory: null,\r\n  Dates: null,\r\n  Cases: null,\r\n  Deaths: null,\r\n  Recovered: null,\r\n  WWDataHistory: null,\r\n  WWDates: null,\r\n  WWCases: null,\r\n  WWDeaths: null,\r\n  WWRecovered: null,\r\n  currentCountryLoading: false,\r\n  currentCountryError: null\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_HiSTORY_CURRENT_COUNTRY:\r\n      return {\r\n        ...state,\r\n        currentCountryHistory: action.payload.Data,\r\n        Dates: action.payload.Dates,\r\n        Cases: action.payload.Cases,\r\n        Deaths: action.payload.Deaths,\r\n        Recovered: action.payload.Recovered,\r\n        currentCountryLoading: false\r\n      };\r\n    case GET_WW_DATA_HISTORY:\r\n      return {\r\n        ...state,\r\n        WWDataHistory: action.payload.Data,\r\n        WWDates: action.payload.Dates,\r\n        WWCases: action.payload.Cases,\r\n        WWDeaths: action.payload.Deaths,\r\n        WWRecovered: action.payload.Recovered,\r\n        currentCountryLoading: false\r\n      };\r\n    case CLEAR_CURRENT_COUNTRY:\r\n      return {\r\n        ...state,\r\n        currentCountryHistory: null,\r\n        Dates: null,\r\n        Cases: null,\r\n        Deaths: null,\r\n        Recovered: null\r\n      };\r\n    case SET_HiSTORY_CURRENT_COUNTRY_LOADING:\r\n      return { ...state, currentCountryLoading: true };\r\n\r\n    case SET_HiSTORY_CURRENT_COUNTRY_ERROR:\r\n      return {\r\n        ...state,\r\n        currentCountryError: action.payload,\r\n        currentCountryLoading: false\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport AllCountries from './Countries';\r\nimport CurrentCountryData from './CurrentCountry';\r\nimport DataHistory from './DataHistory';\r\n\r\nexport default combineReducers({\r\n  AllCountries,\r\n  CurrentCountryData,\r\n  DataHistory\r\n});\r\n","// Countries\r\nexport const GET_ALL_COUNTRIES = 'GET_ALL_COUNTRIES';\r\nexport const GET_WWStats = 'GET_WWStats';\r\nexport const SET_ALL_COUNTRIES_LOADING = 'SET_ALL_COUNTRIES_LOADING';\r\nexport const ERROR = 'ERROR';\r\n//Current\r\nexport const SET_CURRENT_COUNTRY = 'SET_CURRENT_COUNTRY';\r\nexport const SET_CURRENT_COUNTRY_LOADING = 'SET_CURRENT_COUNTRY_LOADING';\r\nexport const SET_CURRENT_COUNTRY_ERROR = 'SET_CURRENT_COUNTRY_ERROR';\r\n//History\r\nexport const GET_HiSTORY_CURRENT_COUNTRY = 'GET_HiSTORY_CURRENT_COUNTRY';\r\nexport const GET_WW_DATA_HISTORY = 'GET_WW_DATA_HISTORY';\r\nexport const CLEAR_CURRENT_COUNTRY = 'CLEAR_CURRENT_COUNTRY';\r\nexport const SET_HiSTORY_CURRENT_COUNTRY_LOADING =\r\n  'SET_HiSTORY_CURRENT_COUNTRY_LOADING';\r\nexport const SET_HiSTORY_CURRENT_COUNTRY_ERROR =\r\n  'SET_HiSTORY_CURRENT_COUNTRY_ERROR';\r\n","import {\r\n  GET_ALL_COUNTRIES,\r\n  GET_WWStats,\r\n  SET_ALL_COUNTRIES_LOADING,\r\n  ERROR\r\n} from './Types';\r\n\r\n// Get All Countries\r\nexport const getAllCountries = () => async dispatch => {\r\n  try {\r\n    setLoading();\r\n    const res = await fetch('https://corona.lmao.ninja/v2/countries');\r\n    if (!res.ok) {\r\n      dispatch({\r\n        type: ERROR,\r\n        payload: `HTTP Status: ${res.status}`\r\n      });\r\n      throw new Error(`HTTP Status: ${res.status}`);\r\n    }\r\n    const data = await res.json();\r\n    const sortedCountriesByCases = [...data].sort((a, b) => {\r\n      return b.cases - a.cases;\r\n    });\r\n    dispatch({\r\n      type: GET_ALL_COUNTRIES,\r\n      payload: { allCountries: data, sortedCountriesByCases }\r\n    });\r\n  } catch (err) {\r\n    dispatch({ type: ERROR, payload: err.message });\r\n  }\r\n};\r\n\r\nexport const WWStatsFetch = () => async dispatch => {\r\n  try {\r\n    setLoading();\r\n    const res = await fetch('https://corona.lmao.ninja/v2/all');\r\n    dispatch({ type: GET_WWStats, payload: await res.json() });\r\n  } catch (err) {\r\n    dispatch({ type: ERROR, payload: err.message });\r\n  }\r\n};\r\n\r\nexport const setLoading = () => {\r\n  return { type: SET_ALL_COUNTRIES_LOADING };\r\n};\r\n","import {\r\n  SET_CURRENT_COUNTRY,\r\n  SET_CURRENT_COUNTRY_LOADING,\r\n  SET_CURRENT_COUNTRY_ERROR\r\n} from './Types';\r\n\r\nexport const setCurrentCountry = country => {\r\n  setLoading();\r\n  return { type: SET_CURRENT_COUNTRY, payload: country };\r\n};\r\n\r\nexport const setLoading = () => {\r\n  return { type: SET_CURRENT_COUNTRY_LOADING };\r\n};\r\n","import {\r\n  GET_HiSTORY_CURRENT_COUNTRY,\r\n  GET_WW_DATA_HISTORY,\r\n  CLEAR_CURRENT_COUNTRY,\r\n  SET_HiSTORY_CURRENT_COUNTRY_LOADING,\r\n  SET_HiSTORY_CURRENT_COUNTRY_ERROR\r\n} from './Types';\r\n\r\nexport const getCurrentHistory = country => async dispatch => {\r\n  let Dates = [];\r\n  let Cases = [];\r\n  let Deaths = [];\r\n  let Recovered = [];\r\n\r\n  try {\r\n    setLoading();\r\n    const res = await fetch(\r\n      `https://corona.lmao.ninja/v2/historical/${country}`\r\n    );\r\n    if (!res.ok) {\r\n      dispatch({\r\n        type: SET_HiSTORY_CURRENT_COUNTRY_ERROR,\r\n        payload: `HTTP Status: ${res.status}`\r\n      });\r\n      throw new Error(`HTTP Status: ${res.status}`);\r\n    } else {\r\n      const Data = await res.json();\r\n      for (let [key, value] of Object.entries(Data.timeline.cases)) {\r\n        let newDate = key.split('/');\r\n        Dates.push(`${newDate[1]}/${newDate[0]}`);\r\n        Cases.push(value);\r\n      }\r\n      for (let [key, value] of Object.entries(Data.timeline.deaths)) {\r\n        Deaths.push(value);\r\n      }\r\n      for (let [key, value] of Object.entries(Data.timeline.recovered)) {\r\n        Recovered.push(value);\r\n      }\r\n      if (\r\n        Dates.length > 0 &&\r\n        Cases.length > 0 &&\r\n        Deaths.length > 0 &&\r\n        Recovered.length > 0\r\n      ) {\r\n        dispatch({\r\n          type: GET_HiSTORY_CURRENT_COUNTRY,\r\n          payload: { Data, Dates, Cases, Deaths, Recovered }\r\n        });\r\n      }\r\n    }\r\n  } catch (err) {\r\n    dispatch({ type: SET_HiSTORY_CURRENT_COUNTRY_ERROR, payload: err.message });\r\n  }\r\n};\r\n\r\nexport const getWWHistory = () => async dispatch => {\r\n  let Dates = [];\r\n  let Cases = [];\r\n  let Deaths = [];\r\n  let Recovered = [];\r\n  try {\r\n    setLoading();\r\n    const res = await fetch('https://corona.lmao.ninja/v2/historical/all');\r\n    if (!res.ok) {\r\n      dispatch({\r\n        type: SET_HiSTORY_CURRENT_COUNTRY_ERROR,\r\n        payload: `HTTP Status: ${res.status}`\r\n      });\r\n      throw new Error(`HTTP Status: ${res.status}`);\r\n    } else {\r\n      const Data = await res.json();\r\n      for (let [key, value] of Object.entries(Data.cases)) {\r\n        let newDate = key.split('/');\r\n        Dates.push(`${newDate[1]}/${newDate[0]}`);\r\n        Cases.push(value);\r\n      }\r\n      for (let [key, value] of Object.entries(Data.deaths)) {\r\n        Deaths.push(value);\r\n      }\r\n      for (let [key, value] of Object.entries(Data.recovered)) {\r\n        Recovered.push(value);\r\n      }\r\n      if (\r\n        Dates.length > 0 &&\r\n        Cases.length > 0 &&\r\n        Deaths.length > 0 &&\r\n        Recovered.length > 0\r\n      ) {\r\n        dispatch({\r\n          type: GET_WW_DATA_HISTORY,\r\n          payload: { Data, Dates, Cases, Deaths, Recovered }\r\n        });\r\n      }\r\n    }\r\n  } catch (err) {\r\n    dispatch({ type: SET_HiSTORY_CURRENT_COUNTRY_ERROR, payload: err.message });\r\n  }\r\n};\r\n\r\nexport const clearCurrentHistory = () => {\r\n  return { type: CLEAR_CURRENT_COUNTRY };\r\n};\r\n\r\nexport const setLoading = () => {\r\n  return { type: SET_HiSTORY_CURRENT_COUNTRY_LOADING };\r\n};\r\n","import React from 'react';\r\nimport { components } from 'react-select';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CountriesItem = ({ data, ...props }) => {\r\n  return (\r\n    <div style={{ width: '100% !important', textAlign: 'left !important' }}>\r\n      <components.Option {...props}>\r\n        <img src={data.countryInfo.flag} className='flag' alt={data.country} />\r\n        {data.country}\r\n      </components.Option>\r\n    </div>\r\n  );\r\n};\r\n\r\nCountriesItem.propTypes = {\r\n  data: PropTypes.object.isRequired\r\n};\r\n\r\nexport default CountriesItem;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getAllCountries, WWStatsFetch } from '../../Actions/Countries';\r\nimport { setCurrentCountry } from '../../Actions/CurrentCountry';\r\nimport {\r\n  getCurrentHistory,\r\n  getWWHistory,\r\n  clearCurrentHistory\r\n} from '../../Actions/DataHistory';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport AsyncSelect from 'react-select/async';\r\nimport CountriesItem from './CountriesItem';\r\nimport PropTypes from 'prop-types';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nconst Countries = ({\r\n  AllCountriesData: { allCountriesData, allCountriesloading },\r\n  getAllCountries,\r\n  WWStatsFetch,\r\n  setCurrentCountry,\r\n  getCurrentHistory,\r\n  getWWHistory,\r\n  clearCurrentHistory\r\n}) => {\r\n  useEffect(() => {\r\n    getAllCountries();\r\n    WWStatsFetch();\r\n    getWWHistory();\r\n  }, [getAllCountries, WWStatsFetch, getWWHistory]);\r\n\r\n  const [, setInputValue] = useState('');\r\n\r\n  const filterCountrie = inputValue => {\r\n    if (!allCountriesloading && allCountriesData !== null)\r\n      return allCountriesData.filter(c =>\r\n        c.country.toLowerCase().includes(inputValue.toLowerCase())\r\n      );\r\n  };\r\n\r\n  const loadOptions = (InputValue, callback) => {\r\n    callback(filterCountrie(InputValue));\r\n  };\r\n\r\n  const handleInputChange = newValue => {\r\n    const inputValue = newValue.replace(/\\W/g, '');\r\n    setInputValue({ inputValue });\r\n    return inputValue;\r\n  };\r\n\r\n  const onChange = e => {\r\n    if (e !== null) {\r\n      const {\r\n        updated,\r\n        country,\r\n        countryInfo: { flag, lat, long },\r\n        cases,\r\n        todayCases,\r\n        deaths,\r\n        todayDeaths,\r\n        recovered,\r\n        active,\r\n        critical,\r\n        tests\r\n      } = e;\r\n      //   Set Current country\r\n      setCurrentCountry({\r\n        updated,\r\n        country,\r\n        flag,\r\n        lat,\r\n        long,\r\n        cases,\r\n        todayCases,\r\n        deaths,\r\n        todayDeaths,\r\n        recovered,\r\n        active,\r\n        critical,\r\n        tests\r\n      });\r\n\r\n      getCurrentHistory(country);\r\n    } else {\r\n      setCurrentCountry(null);\r\n      clearCurrentHistory();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col xs='12' sm='12' md='12' lg='12' xl='12'>\r\n          <div className='countriesSection'>\r\n            <div className='countriesDopdown'>\r\n              {allCountriesloading || allCountriesData === null ? (\r\n                <div className='Spinner'>\r\n                  <Spinner animation='border' role='status' variant='success'>\r\n                    <span className='sr-only'>Loading...</span>\r\n                  </Spinner>\r\n                </div>\r\n              ) : (\r\n                <div>\r\n                  <AsyncSelect\r\n                    placeholder='Search or Select Country ...'\r\n                    options={allCountriesData}\r\n                    getOptionLabel={option => {\r\n                      return (\r\n                        <div>\r\n                          <img\r\n                            src={option.countryInfo.flag}\r\n                            className='flag'\r\n                            alt={option.country}\r\n                          />\r\n                          {`${option.country}`}\r\n                        </div>\r\n                      );\r\n                    }}\r\n                    getOptionValue={option => option}\r\n                    cacheOptions\r\n                    loadOptions={loadOptions}\r\n                    defaultOptions\r\n                    onInputChange={handleInputChange}\r\n                    onChange={onChange}\r\n                    components={{ Option: CountriesItem }}\r\n                    className='searchBox'\r\n                    autoFocus={true}\r\n                    isClearable={true}\r\n                    // menuIsOpen={true}\r\n                  />\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nCountries.prototype = {\r\n  allCountriesData: PropTypes.object,\r\n  allCountriesloading: PropTypes.bool.isRequired,\r\n  getAllCountries: PropTypes.func.isRequired,\r\n  setCurrentCountry: PropTypes.func.isRequired,\r\n  WWStatsFetch: PropTypes.func.isRequired,\r\n  getCurrentHistory: PropTypes.func.isRequired,\r\n  getWWHistory: PropTypes.func.isRequired,\r\n  clearCurrentHistory: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  AllCountriesData: state.AllCountries\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  getAllCountries,\r\n  WWStatsFetch,\r\n  setCurrentCountry,\r\n  getCurrentHistory,\r\n  getWWHistory,\r\n  clearCurrentHistory\r\n})(Countries);\r\n","import React from 'react';\r\nimport moment from 'moment';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ContriesListItem = ({\r\n  country: {\r\n    updated,\r\n    country,\r\n    countryInfo: { flag },\r\n    cases,\r\n    todayCases,\r\n    deaths,\r\n    todayDeaths,\r\n    recovered,\r\n    active,\r\n    critical,\r\n    tests\r\n  }\r\n}) => {\r\n  return (\r\n    <div className='CountryListItem'>\r\n      <div className='flagAndTitle'>\r\n        <img src={flag} alt={country} />\r\n        <p className='CountryName'>{country}</p>\r\n      </div>\r\n\r\n      <div className='CDR'>\r\n        <OverlayTrigger\r\n          key='Cases'\r\n          placement='bottom'\r\n          overlay={\r\n            <Tooltip className='myToolTip' id='tooltip-bottom'>\r\n              Confirmed Cases\r\n            </Tooltip>\r\n          }>\r\n          <div className='Cases'>\r\n            <i className='fas fa-users'></i>\r\n            {cases.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}\r\n            {todayCases > 0 && (\r\n              <span className='todayResults'>\r\n                +\r\n                {todayCases\r\n                  .toString()\r\n                  .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}\r\n              </span>\r\n            )}\r\n          </div>\r\n        </OverlayTrigger>\r\n\r\n        <OverlayTrigger\r\n          key='Deaths'\r\n          placement='bottom'\r\n          overlay={\r\n            <Tooltip className='myToolTip' id='tooltip-bottom'>\r\n              Confirmed Deaths\r\n            </Tooltip>\r\n          }>\r\n          <div className='Deaths'>\r\n            <i className='fas fa-skull'></i>\r\n            {deaths.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}\r\n            {todayDeaths > 0 && (\r\n              <span className='todayResults'>\r\n                +\r\n                {todayDeaths\r\n                  .toString()\r\n                  .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}\r\n              </span>\r\n            )}\r\n          </div>\r\n        </OverlayTrigger>\r\n\r\n        <OverlayTrigger\r\n          key='Recovered'\r\n          placement='bottom'\r\n          overlay={\r\n            <Tooltip className='myToolTip' id='tooltip-bottom'>\r\n              Confirmed Recovered\r\n            </Tooltip>\r\n          }>\r\n          <div className='Recovered'>\r\n            <i className='fas fa-hospital-user'></i>\r\n            {recovered.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}\r\n          </div>\r\n        </OverlayTrigger>\r\n\r\n        <OverlayTrigger\r\n          key='Tests'\r\n          placement='bottom'\r\n          overlay={\r\n            <Tooltip className='myToolTip' id='tooltip-bottom'>\r\n              Confirmed Tests\r\n            </Tooltip>\r\n          }>\r\n          <div className='Tests'>\r\n            <i className='fas fa-vial'></i>\r\n            {tests.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}\r\n          </div>\r\n        </OverlayTrigger>\r\n\r\n        {/* <p className='lastUpdateList'>\r\n          <i className='far fa-clock' />\r\n          Last update:<span>{moment(updated).fromNow()}.</span>\r\n        </p> */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nContriesListItem.propTypes = {\r\n  country: PropTypes.object.isRequired\r\n};\r\n\r\nexport default ContriesListItem;\r\n","import React, { Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ContriesListItem from './ContriesListItem';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AllCountriesList = ({\r\n  AllCountriesData: {\r\n    allCountriesData,\r\n    allCountriesSortedByCases,\r\n    allCountriesloading\r\n  }\r\n}) => {\r\n  return (\r\n    <>\r\n      {allCountriesData === null || allCountriesloading ? (\r\n        <div className='Spinner'>\r\n          <Spinner animation='border' role='status' variant='success'>\r\n            <span className='sr-only'>Loading...</span>\r\n          </Spinner>\r\n        </div>\r\n      ) : (\r\n        <div className='AllCountriesList'>\r\n          {allCountriesSortedByCases.map((country, id) => (\r\n            <ContriesListItem country={country} key={id} id={id} />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nAllCountriesList.prototype = {\r\n  allCountriesData: PropTypes.array,\r\n  allCountriesSortedByCases: PropTypes.array,\r\n  allCountriesloading: PropTypes.bool.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  AllCountriesData: state.AllCountries\r\n});\r\n\r\nexport default connect(mapStateToProps)(AllCountriesList);\r\n","import React, { useState, useEffect, Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ReactMapGL, { FlyToInterpolator, Marker, Popup } from 'react-map-gl';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport PropTypes from 'prop-types';\r\n\r\nlet apiKey;\r\nprocess.env.NODE_ENV\r\n  ? (apiKey = process.env.REACT_APP_API_KEY)\r\n  : (apiKey = process.env.API_KEY);\r\n\r\nconst GlobalMap = ({\r\n  CurrentCountryData: { currentCountry, currentCountryLoading },\r\n  AllCountriesData: { allCountriesData, allCountriesloading }\r\n}) => {\r\n  const [viewPort, setViewPort] = useState({\r\n    width: '100%',\r\n    height: '100%',\r\n    scrollZoom: false,\r\n    boxZoom: false,\r\n    doubleClickZoom: false\r\n  });\r\n\r\n  const [settings, setsettings] = useState({\r\n    dragPan: false,\r\n    dragRotate: false,\r\n    scrollZoom: false,\r\n    touchZoom: false,\r\n    touchRotate: false,\r\n    keyboard: false,\r\n    doubleClickZoom: false\r\n  });\r\n\r\n  const [popupState, setPopupState] = useState({\r\n    state: false,\r\n    lat: 16,\r\n    long: 27\r\n  });\r\n\r\n  useEffect(() => {\r\n    currentCountry !== null && !currentCountryLoading\r\n      ? setViewPort({\r\n          ...viewPort,\r\n          latitude: currentCountry.lat,\r\n          longitude: currentCountry.long,\r\n          zoom: 3.5,\r\n          transitionDuration: 3000,\r\n          transitionInterpolator: new FlyToInterpolator()\r\n        })\r\n      : setViewPort({\r\n          ...viewPort,\r\n          latitude: 16,\r\n          longitude: 27,\r\n          zoom: 1.3,\r\n          transitionDuration: 3000,\r\n          transitionInterpolator: new FlyToInterpolator()\r\n        });\r\n    // eslint-disable-next-line\r\n  }, [currentCountry, currentCountryLoading]);\r\n\r\n  return (\r\n    <Fragment>\r\n      {allCountriesData === null || allCountriesloading ? (\r\n        <div className='Spinner'>\r\n          <Spinner animation='border' role='status' variant='success'>\r\n            <span className='sr-only'>Loading...</span>\r\n          </Spinner>\r\n        </div>\r\n      ) : (\r\n        <ReactMapGL\r\n          className='map'\r\n          {...viewPort}\r\n          {...settings}\r\n          mapboxApiAccessToken={apiKey}\r\n          mapStyle='mapbox://styles/mapbox/dark-v10'\r\n          onViewportChange={viewPort => {\r\n            setViewPort(viewPort);\r\n          }}>\r\n          {allCountriesData.map((country, id) => (\r\n            <Marker\r\n              key={id}\r\n              latitude={country.countryInfo.lat}\r\n              longitude={country.countryInfo.long}\r\n              offsetTop={-15}\r\n              offsetLeft={-5}>\r\n              <i\r\n                className='fas fa-circle circle'\r\n                onMouseEnter={() =>\r\n                  setPopupState({\r\n                    state: true,\r\n                    name: country.country,\r\n                    flag: country.countryInfo.flag,\r\n                    cases: country.cases,\r\n                    deaths: country.deaths,\r\n                    recovered: country.recovered,\r\n                    lat: country.countryInfo.lat,\r\n                    long: country.countryInfo.long\r\n                  })\r\n                }\r\n                onMouseLeave={() =>\r\n                  setPopupState({ ...popupState, state: false })\r\n                }></i>\r\n            </Marker>\r\n          ))}\r\n          {popupState.state && (\r\n            <Popup\r\n              latitude={popupState.lat}\r\n              longitude={popupState.long}\r\n              closeButton={false}\r\n              offsetTop={-10}\r\n              offsetLeft={-5}\r\n              className='popupup'\r\n              onClose={() => {\r\n                setPopupState({ ...popupState, state: false });\r\n              }}>\r\n              <div>\r\n                <h6 className='popupHeader'>\r\n                  <img\r\n                    src={popupState.flag}\r\n                    alt='flag'\r\n                    style={{ width: '60px' }}\r\n                  />\r\n                  {popupState.name}\r\n                </h6>\r\n                <p className='popupCases'>\r\n                  Cases:{' '}\r\n                  {popupState.cases\r\n                    .toString()\r\n                    .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}\r\n                </p>\r\n                <p className='popupDeaths'>\r\n                  Deaths:{' '}\r\n                  {popupState.deaths\r\n                    .toString()\r\n                    .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}\r\n                </p>\r\n                <p className='popupRecovered'>\r\n                  Recovered:{' '}\r\n                  {popupState.recovered\r\n                    .toString()\r\n                    .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}\r\n                </p>\r\n              </div>\r\n            </Popup>\r\n          )}\r\n        </ReactMapGL>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nGlobalMap.prototype = {\r\n  currentCountry: PropTypes.object,\r\n  currentCountryLoading: PropTypes.bool,\r\n  allCountriesData: PropTypes.object,\r\n  allCountriesloading: PropTypes.bool\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  CurrentCountryData: state.CurrentCountryData,\r\n  AllCountriesData: state.AllCountries\r\n});\r\n\r\nexport default connect(mapStateToProps)(GlobalMap);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Line } from 'react-chartjs-2';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CurrentCountryLineItem = ({\r\n  Dates,\r\n  Cases,\r\n  Deaths,\r\n  Recovered,\r\n  CurrentCountryData: { currentCountry }\r\n}) => {\r\n  return (\r\n    <Line\r\n      className='Line'\r\n      data={{\r\n        labels: Dates,\r\n        datasets: [\r\n          {\r\n            // radius: 0,\r\n            label: 'Cases',\r\n            data: Cases,\r\n            fill: false,\r\n            borderColor: '#fca903',\r\n            backgroundColor: '#fca903'\r\n          },\r\n          {\r\n            label: 'Deaths',\r\n            data: Deaths,\r\n            fill: false,\r\n            borderColor: '#d14356',\r\n            backgroundColor: '#d14356'\r\n          },\r\n          {\r\n            label: 'Recovered',\r\n            data: Recovered,\r\n            fill: false,\r\n            borderColor: '#49d170',\r\n            backgroundColor: '#49d170'\r\n          }\r\n        ]\r\n      }}\r\n      options={{\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        title: {\r\n          display: true,\r\n          text: currentCountry\r\n            ? `${currentCountry.country}'s Stats`\r\n            : \"World's Stats\"\r\n        },\r\n        legend: {\r\n          display: true,\r\n          position: 'bottom',\r\n          labels: {\r\n            usePointStyle: true,\r\n            fontColor: '#8a8a8a'\r\n          }\r\n        },\r\n        tooltips: {\r\n          enabled: true,\r\n          backgroundColor: '#ededed',\r\n          borderWidth: '2',\r\n          borderColor: '#8a8a8a',\r\n          titleFontColor: '#4a4a4a',\r\n          bodyFontColor: '#4a4a4a',\r\n          callbacks: {\r\n            label: (tooltipItem, data) => {\r\n              let label = data.datasets[tooltipItem.datasetIndex].label || '';\r\n              if (label) {\r\n                label += ': ';\r\n              }\r\n              label += Math.round(tooltipItem.yLabel * 100) / 100;\r\n              return label;\r\n            }\r\n          }\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              ticks: {\r\n                fontSize: 10,\r\n                fontColor: '#2e2e2e'\r\n              }\r\n            }\r\n          ],\r\n          yAxes: [\r\n            {\r\n              gridLines: {\r\n                display: true\r\n              },\r\n              ticks: {\r\n                beginAtZero: true,\r\n                fontSize: 10,\r\n                fontColor: '#2e2e2e'\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  CurrentCountryData: state.CurrentCountryData\r\n});\r\n\r\nCurrentCountryLineItem.propTypes = {};\r\n\r\nexport default connect(mapStateToProps)(CurrentCountryLineItem);\r\n","import React, { useEffect, useState } from 'react';\r\nimport CurrentCountryLineItem from './CurrentCountryLineItem';\r\nimport { connect } from 'react-redux';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CurrentCountryLine = ({\r\n  DataHistory: {\r\n    Dates,\r\n    WWDates,\r\n    Cases,\r\n    WWCases,\r\n    Deaths,\r\n    WWDeaths,\r\n    Recovered,\r\n    WWRecovered,\r\n    currentCountryLoading\r\n  }\r\n}) => {\r\n  const [DataHistory, setDataHistory] = useState(null);\r\n\r\n  useEffect(() => {\r\n    Dates === null && WWDates !== null\r\n      ? setDataHistory({\r\n          Dates: WWDates,\r\n          Cases: WWCases,\r\n          Deaths: WWDeaths,\r\n          Recovered: WWRecovered\r\n        })\r\n      : setDataHistory({\r\n          Dates,\r\n          Cases,\r\n          Deaths,\r\n          Recovered\r\n        });\r\n  }, [WWDates, Dates]);\r\n\r\n  return (\r\n    <>\r\n      {!WWDates || currentCountryLoading ? (\r\n        <div className='Spinner'>\r\n          <Spinner animation='border' role='status' variant='success'>\r\n            <span className='sr-only'>Loading...</span>\r\n          </Spinner>\r\n        </div>\r\n      ) : (\r\n        <CurrentCountryLineItem\r\n          Dates={DataHistory.Dates}\r\n          Cases={DataHistory.Cases}\r\n          Deaths={DataHistory.Deaths}\r\n          Recovered={DataHistory.Recovered}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nCurrentCountryLine.propTypes = {\r\n  WWDates: PropTypes.number,\r\n  Cases: PropTypes.number,\r\n  WWCases: PropTypes.number,\r\n  Deaths: PropTypes.number,\r\n  WWDeaths: PropTypes.number,\r\n  Recovered: PropTypes.number,\r\n  WWRecovered: PropTypes.number,\r\n  currentCountryLoading: PropTypes.bool\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  DataHistory: state.DataHistory\r\n});\r\n\r\nexport default connect(mapStateToProps)(CurrentCountryLine);\r\n","import React from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CurrentCountryBarItem = ({ Dates, Cases, Deaths, Recovered }) => {\r\n  return (\r\n    <Bar\r\n      className='Bar'\r\n      data={{\r\n        labels: Dates,\r\n        datasets: [\r\n          {\r\n            radius: 0,\r\n            label: 'Cases',\r\n            data: Cases,\r\n            fill: false,\r\n            borderColor: '#fca903',\r\n            backgroundColor: '#fca903'\r\n          },\r\n          {\r\n            label: 'Deaths',\r\n            data: Deaths,\r\n            fill: false,\r\n            borderColor: '#d14356',\r\n            backgroundColor: '#d14356'\r\n          },\r\n          {\r\n            label: 'Recovered',\r\n            data: Recovered,\r\n            fill: false,\r\n            borderColor: '#49d170',\r\n            backgroundColor: '#49d170'\r\n          }\r\n        ]\r\n      }}\r\n      options={{\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        title: {\r\n          display: true,\r\n          text: \"World's Stats\"\r\n        },\r\n        legend: {\r\n          display: true,\r\n          position: 'bottom',\r\n          labels: {\r\n            usePointStyle: true,\r\n            fontColor: '#8a8a8a'\r\n          }\r\n        },\r\n        tooltips: {\r\n          enabled: true,\r\n          backgroundColor: '#ededed',\r\n          borderWidth: '2',\r\n          borderColor: '#8a8a8a',\r\n          titleFontColor: '#4a4a4a',\r\n          bodyFontColor: '#4a4a4a',\r\n          callbacks: {\r\n            label: (tooltipItem, data) => {\r\n              let label = data.datasets[tooltipItem.datasetIndex].label || '';\r\n              if (label) {\r\n                label += ': ';\r\n              }\r\n              label += Math.round(tooltipItem.yLabel * 100) / 100;\r\n              return label;\r\n            }\r\n          }\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              ticks: {\r\n                fontSize: 10,\r\n                fontColor: '#2e2e2e'\r\n              }\r\n            }\r\n          ],\r\n          yAxes: [\r\n            {\r\n              gridLines: {\r\n                display: true\r\n              },\r\n              ticks: {\r\n                beginAtZero: true,\r\n                fontSize: 10,\r\n                fontColor: '#2e2e2e'\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nCurrentCountryBarItem.propTypes = {};\r\n\r\nexport default CurrentCountryBarItem;\r\n","import React, { useState, useEffect } from 'react';\r\nimport CurrentCountryBarItem from './CurrentCountryBarItem';\r\nimport { connect } from 'react-redux';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CurrentCountryBar = ({\r\n  DataHistory: {\r\n    Dates,\r\n    Cases,\r\n    Deaths,\r\n    Recovered,\r\n    WWDates,\r\n    WWCases,\r\n    WWDeaths,\r\n    WWRecovered,\r\n    currentCountryLoading\r\n  }\r\n}) => {\r\n  const [getDateHistory, setDataHistory] = useState(null);\r\n  useEffect(() => {\r\n    !Dates && WWDates\r\n      ? setDataHistory({\r\n          Dates: WWDates,\r\n          Cases: WWCases,\r\n          Deaths: WWDeaths,\r\n          Recovered: WWRecovered\r\n        })\r\n      : setDataHistory({\r\n          Dates,\r\n          Cases,\r\n          Deaths,\r\n          Recovered\r\n        });\r\n  }, [Dates, WWDates]);\r\n\r\n  return (\r\n    <>\r\n      {!WWDates || currentCountryLoading ? (\r\n        <div className='Spinner'>\r\n          <Spinner animation='border' role='status' variant='success'>\r\n            <span className='sr-only'>Loading...</span>\r\n          </Spinner>\r\n        </div>\r\n      ) : (\r\n        <CurrentCountryBarItem\r\n          Dates={getDateHistory.Dates}\r\n          Cases={getDateHistory.Cases}\r\n          Deaths={getDateHistory.Deaths}\r\n          Recovered={getDateHistory.Recovered}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  DataHistory: state.DataHistory\r\n});\r\n\r\nCurrentCountryBar.propTypes = {};\r\n\r\nexport default connect(mapStateToProps)(CurrentCountryBar);\r\n","import React from 'react';\r\nimport { Pie } from 'react-chartjs-2';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst PieChartItem = ({ Cases, Deaths, Recovered }) => {\r\n  return (\r\n    <Pie\r\n      className='pie'\r\n      data={{\r\n        datasets: [\r\n          {\r\n            data: [Cases, Deaths, Recovered],\r\n            backgroundColor: ['#fca903', '#d14356', '#49d170']\r\n          }\r\n        ],\r\n        labels: ['Cases', 'Deaths', 'Recovered']\r\n      }}\r\n      options={{\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        title: {\r\n          display: true,\r\n          text: \"World's Stats\"\r\n        },\r\n        legend: {\r\n          display: true,\r\n          position: 'bottom',\r\n          labels: {\r\n            usePointStyle: true,\r\n            fontColor: '#8a8a8a'\r\n          }\r\n        },\r\n        tooltips: {\r\n          enabled: true,\r\n          backgroundColor: '#ededed',\r\n          borderWidth: '2',\r\n          borderColor: '#8a8a8a',\r\n          titleFontColor: '#4a4a4a',\r\n          bodyFontColor: '#4a4a4a',\r\n        }\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nPieChartItem.propTypes = {};\r\n\r\nexport default PieChartItem;\r\n","import React, { useEffect, useState } from 'react';\r\nimport PieChartItem from './PieChartItem';\r\nimport { connect } from 'react-redux';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst PieChart = ({\r\n  AllCountriesData: { WWStats, allCountriesloading },\r\n  CurrentCountryData: { currentCountry, currentCountryLoading }\r\n}) => {\r\n  useEffect(() => {\r\n    if (WWStats !== null) {\r\n      setDatas({\r\n        Cases: WWStats.cases,\r\n        Deaths: WWStats.deaths,\r\n        Recovered: WWStats.recovered\r\n      });\r\n    }\r\n    if (currentCountry !== null) {\r\n      setDatas({\r\n        Cases: currentCountry.cases,\r\n        Deaths: currentCountry.deaths,\r\n        Recovered: currentCountry.recovered\r\n      });\r\n    }\r\n  }, [WWStats, currentCountry]);\r\n\r\n  const [getDatas, setDatas] = useState(null);\r\n\r\n  return (\r\n    <>\r\n      {getDatas === null || allCountriesloading ? (\r\n        <div className='Spinner'>\r\n          <Spinner animation='border' role='status' variant='success'>\r\n            <span className='sr-only'>Loading...</span>\r\n          </Spinner>\r\n        </div>\r\n      ) : (\r\n        <PieChartItem\r\n          Cases={getDatas.Cases}\r\n          Deaths={getDatas.Deaths}\r\n          Recovered={getDatas.Recovered}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nPieChart.propTypes = {\r\n  WWStats: PropTypes.object,\r\n  allCountriesloading: PropTypes.bool,\r\n  currentCountry: PropTypes.object\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  AllCountriesData: state.AllCountries,\r\n  CurrentCountryData: state.CurrentCountryData\r\n});\r\n\r\nexport default connect(mapStateToProps)(PieChart);\r\n","import React from 'react';\r\nimport moment from 'moment';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\n\r\nconst WWStatesChild = ({\r\n  country = null,\r\n  flag = null,\r\n  cases,\r\n  todayCases,\r\n  deaths,\r\n  todayDeaths,\r\n  recovered,\r\n  tests,\r\n  updated\r\n}) => {\r\n  return (\r\n    <>\r\n      {country !== null && flag !== null ? (\r\n        <h1 className='WWStatsHeader'>\r\n          <img src={flag} alt={country} className='countryFlag' />\r\n          {country}\r\n        </h1>\r\n      ) : (\r\n        <h1 className='WWStatsHeader'>\r\n          <i className='fas fa-globe'></i> Coronavirus World Stats\r\n        </h1>\r\n      )}\r\n\r\n      <div className='WCDR'>\r\n        <OverlayTrigger\r\n          key='Cases'\r\n          placement='bottom'\r\n          overlay={\r\n            <Tooltip className='myToolTip' id='tooltip-bottom'>\r\n              Confirmed Cases\r\n            </Tooltip>\r\n          }>\r\n          <div className='WWCases'>\r\n            <p className='WWIcons'>\r\n              <i className='fas fa-users'></i> Cases\r\n            </p>\r\n            {cases.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}\r\n            {todayCases > 0 && (\r\n              <span className='WWtodayResults'>\r\n                +\r\n                {todayCases\r\n                  .toString()\r\n                  .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}\r\n              </span>\r\n            )}\r\n          </div>\r\n        </OverlayTrigger>\r\n\r\n        <OverlayTrigger\r\n          key='Deaths'\r\n          placement='bottom'\r\n          overlay={\r\n            <Tooltip className='myToolTip' id='tooltip-bottom'>\r\n              Confirmed Deaths\r\n            </Tooltip>\r\n          }>\r\n          <div className='WWDeaths'>\r\n            <p className='WWIcons'>\r\n              <i className='fas fa-skull'></i> Deaths\r\n            </p>\r\n            {deaths.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}\r\n            {todayDeaths > 0 && (\r\n              <span className='WWtodayResults'>\r\n                +\r\n                {todayDeaths\r\n                  .toString()\r\n                  .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}\r\n              </span>\r\n            )}\r\n          </div>\r\n        </OverlayTrigger>\r\n\r\n        <OverlayTrigger\r\n          key='Recovered'\r\n          placement='bottom'\r\n          overlay={\r\n            <Tooltip className='myToolTip' id='tooltip-bottom'>\r\n              Confirmed Recovered\r\n            </Tooltip>\r\n          }>\r\n          <div className='WWRecovered'>\r\n            <p className='WWIcons'>\r\n              <i className='fas fa-hospital-user'></i> Recovered\r\n            </p>\r\n            {recovered.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}\r\n          </div>\r\n        </OverlayTrigger>\r\n\r\n        <OverlayTrigger\r\n          key='Tests'\r\n          placement='bottom'\r\n          overlay={\r\n            <Tooltip className='myToolTip' id='tooltip-bottom'>\r\n              Confirmed Tests\r\n            </Tooltip>\r\n          }>\r\n          <div className='WWTests'>\r\n            <p className='WWIcons'>\r\n              <i className='fas fa-vial'></i> Tests\r\n            </p>\r\n            {tests.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}\r\n          </div>\r\n        </OverlayTrigger>\r\n      </div>\r\n      <p className='lastUpdate'>\r\n        <i className='far fa-clock' />\r\n        Last update:\r\n        <span>{updated > 0 && moment(updated).fromNow()}.</span>\r\n      </p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WWStatesChild;\r\n","import React from 'react';\r\nimport Child from './WWStatesChild';\r\nimport moment from 'moment';\r\nimport { connect } from 'react-redux';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\n\r\nconst WWStats = ({\r\n  AllCountriesData: { WWStats, allCountriesloading },\r\n  CurrentCountryData: { currentCountry, currentCountryLoading }\r\n}) => {\r\n  let {\r\n    updated,\r\n    cases,\r\n    todayCases,\r\n    deaths,\r\n    todayDeaths,\r\n    recovered,\r\n    active,\r\n    critical,\r\n    tests\r\n  } = WWStats || {};\r\n\r\n  return (\r\n    <div className='WWStats'>\r\n      {WWStats === null || allCountriesloading ? (\r\n        <div className='Spinner'>\r\n          <Spinner animation='border' role='status' variant='success'>\r\n            <span className='sr-only'>Loading...</span>\r\n          </Spinner>\r\n        </div>\r\n      ) : currentCountry === null || allCountriesloading ? (\r\n        <Child\r\n          cases={cases}\r\n          todayCases={todayCases}\r\n          deaths={deaths}\r\n          todayDeaths={todayDeaths}\r\n          recovered={recovered}\r\n          tests={tests}\r\n          updated={updated}\r\n        />\r\n      ) : (\r\n        <Child\r\n          country={currentCountry.country}\r\n          flag={currentCountry.flag}\r\n          cases={currentCountry.cases}\r\n          todayCases={currentCountry.todayCases}\r\n          deaths={currentCountry.deaths}\r\n          todayDeaths={currentCountry.todayDeaths}\r\n          recovered={currentCountry.recovered}\r\n          tests={currentCountry.tests}\r\n          updated={currentCountry.updated}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  AllCountriesData: state.AllCountries,\r\n  CurrentCountryData: state.CurrentCountryData\r\n});\r\n\r\nexport default connect(mapStateToProps)(WWStats);\r\n","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport AllCountriesList from './AllCountriesList';\r\nimport CurrentCountryLine from '../Charts/CurrentCountryLine';\r\nimport CurrentCountryBar from '../Charts/CurrentCountryBar';\r\nimport PieChart from '../Charts/PieChart';\r\nimport GlobalMap from '../Map/GlobalMap';\r\nimport WWStats from './WWStats';\r\n\r\nconst MidSectionContainer = () => {\r\n  return (\r\n    <Container className='MidSection' fluid>\r\n      <Row>\r\n        <Col xs='12' sm='12' md='12' lg='12' xl='12'>\r\n          <WWStats />\r\n        </Col>\r\n      </Row>\r\n      <Row className='rowPadding'>\r\n        <Col xs='12' sm='12' md='8' lg='8' xl='8' className='noPadding'>\r\n          <p className='mapHeader'>\r\n            <i className='fas fa-globe-africa'></i>Coronavirus World Map\r\n          </p>\r\n          <div className='GlobalMap'>\r\n            <GlobalMap />\r\n          </div>\r\n        </Col>\r\n        <Col xs='12' sm='12' md='4' lg='4' xl='4' className='noPadding'>\r\n          <p className='countriesListHeader'>\r\n            <i className='far fa-flag'></i>All Countries Stats\r\n          </p>\r\n          <div className='countriesListContainer'>\r\n            <AllCountriesList />\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col xs='12' sm='12' md='4' lg='4' xl='4'>\r\n          <div className='currentCountryStats'>\r\n            <CurrentCountryLine />\r\n          </div>\r\n        </Col>\r\n        <Col xs='12' sm='12' md='4' lg='4' xl='4'>\r\n          <div className='currentCountryStats'>\r\n            <CurrentCountryBar />\r\n          </div>\r\n        </Col>\r\n        <Col xs='12' sm='12' md='4' lg='4' xl='4'>\r\n          <div className='currentCountryStats'>\r\n            <PieChart />\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default MidSectionContainer;\r\n","import React, { useEffect } from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Container from 'react-bootstrap/Container';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\n\r\nconst NavComp = () => {\r\n  useEffect(() => {\r\n\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <Navbar className='Navbar' variant='light' expand='lg' sticky='top'>\r\n        <Container>\r\n          <OverlayTrigger\r\n            placement='bottom'\r\n            delay={{ show: 150, hide: 150 }}\r\n            overlay={<Tooltip className='myToolTip'>Covid-19 Update</Tooltip>}>\r\n            <Navbar.Brand href='#home' className='title'>\r\n              <i className='fas fa-lungs-virus' /> Covid-19 Update\r\n            </Navbar.Brand>\r\n          </OverlayTrigger>\r\n\r\n          <Navbar.Toggle aria-controls='basic-navbar-nav' />\r\n          <Navbar.Collapse id='basic-navbar-nav'>\r\n            <Nav className='mr-auto justify-content-end navWidth'>\r\n              <Nav.Link href='#home'>\r\n                <i className='fas fa-home navIcons'></i>\r\n                {window.innerWidth<992 && <span className=\"navIconsSpan\">Home</span>}\r\n              </Nav.Link>\r\n              <OverlayTrigger\r\n                placement='bottom'\r\n                delay={{ show: 150, hide: 150 }}\r\n                overlay={\r\n                  <Tooltip className='myToolTip'>Github Repositorie</Tooltip>\r\n                }>\r\n                <Nav.Link\r\n                  href='https://github.com/MedElBoudali/Coronavirus-Update'\r\n                  target='_blank'>\r\n                  <i className='fab fa-github navIcons'></i>\r\n                  {window.innerWidth<992 && <span className=\"navIconsSpan\">Github Repositorie</span>}\r\n                </Nav.Link>\r\n              </OverlayTrigger>\r\n\r\n              <OverlayTrigger\r\n                placement='bottom'\r\n                delay={{ show: 150, hide: 150 }}\r\n                overlay={\r\n                  <Tooltip className='myToolTip'>\r\n                    World Health Organization\r\n                  </Tooltip>\r\n                }>\r\n                <Nav.Link href='https://www.who.int/' target='_blank'>\r\n                  <i className='fas fa-laptop-medical navIcons'></i>\r\n                  {window.innerWidth<992 && <span className=\"navIconsSpan\">World Health Organization</span>}\r\n                </Nav.Link>\r\n              </OverlayTrigger>\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavComp;\r\n","import React, { Fragment } from 'react';\r\nimport Countries from '../Components/TopSection/Countries';\r\nimport MidSectionContainer from '../Components/MidSection/MidSectionContainer';\r\nimport Navbar from '../Layouts/Navbar';\r\n\r\nconst Home = () => {\r\n  return (\r\n    <Fragment>\r\n      <Navbar />\r\n        <Countries />\r\n        <MidSectionContainer />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\nimport Home from './Pages/Home';\n\nfunction App() {\n  return <Home />;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './Reducers';\nimport './Assets/Style/App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nReactDOM.render(\n  <Provider\n    store={createStore(\n      rootReducer,\n      initialState,\n      composeWithDevTools(applyMiddleware(...middleware))\n    )}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
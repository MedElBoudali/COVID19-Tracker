{"version":3,"sources":["Reducers/Countries.js","Reducers/CurrentCountry.js","Reducers/DataHistory.js","Reducers/index.js","Actions/Types.js","Actions/Countries.js","Actions/CurrentCountry.js","Actions/DataHistory.js","Components/TopSection/CountriesItem.jsx","Components/TopSection/Countries.jsx","Components/MidSection/ContriesListItem.jsx","Components/MidSection/AllCountriesList.jsx","Components/Map/GlobalMap.jsx","Components/MidSection/CurrentCountryStats.jsx","Components/MidSection/MidSectionContainer.jsx","Layouts/Navbar.jsx","Pages/Home.jsx","App.js","index.js"],"names":["initialState","allCountriesData","allCountriesSortedByCases","allCountriesloading","allCountriesError","currentCountry","currentCountryLoading","currentCountryError","currentCountryHistory","Dates","Cases","Deaths","Recovered","combineReducers","AllCountries","state","action","type","payload","allCountries","sortedCountriesByCases","CurrentCountryData","DataHistory","Data","setLoading","CountriesItem","data","props","style","width","textAlign","Option","src","countryInfo","flag","className","alt","country","Countries","AllCountriesData","getAllCountries","setCurrentCountry","getCurrentHistory","useEffect","useState","setInputValue","Container","Row","Col","xs","sm","md","lg","xl","Spinner","animation","role","variant","placeholder","options","getOptionLabel","option","getOptionValue","cacheOptions","loadOptions","InputValue","callback","inputValue","filter","c","toLowerCase","includes","filterCountrie","defaultOptions","onInputChange","newValue","replace","onChange","e","updated","lat","long","cases","todayCases","deaths","todayDeaths","recovered","active","critical","tests","components","autoFocus","isClearable","moment","fromNow","prototype","PropTypes","object","bool","isRequired","func","connect","dispatch","a","fetch","res","ok","status","Error","json","sort","b","message","console","log","Object","entries","timeline","key","value","newDate","split","push","length","ContriesListItem","OverlayTrigger","placement","overlay","Tooltip","id","toString","AllCountriesList","map","array","apiKey","useRef","labels","datasets","label","fill","borderColor","backgroundColor","responsive","maintainAspectRatio","tooltips","enabled","callbacks","tooltipItem","datasetIndex","Math","round","yLabel","scales","xAxes","gridLines","display","yAxes","ticks","beginAtZero","process","GlobalMap","height","viewPort","setViewPort","popupState","setPopupState","latitude","longitude","zoom","transitionDuration","transitionInterpolator","FlyToInterpolator","mapboxApiAccessToken","mapStyle","onViewportChange","offsetTop","offsetLeft","onMouseEnter","name","onMouseLeave","closeButton","onClose","MidSectionContainer","fluid","NavComp","Navbar","expand","sticky","delay","show","hide","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","window","innerWidth","target","Home","App","middleware","thunk","ReactDOM","render","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","document","getElementById"],"mappings":"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","file":"static/js/main.88a5f18f.chunk.js","sourcesContent":["import {\r\n  GET_ALL_COUNTRIES,\r\n  SET_ALL_COUNTRIES_LOADING,\r\n  ERROR\r\n} from '../Actions/Types';\r\n\r\nconst initialState = {\r\n  allCountriesData: null,\r\n  allCountriesSortedByCases: null,\r\n  allCountriesloading: false,\r\n  allCountriesError: null\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_ALL_COUNTRIES:\r\n      return {\r\n        ...state,\r\n        allCountriesData: action.payload.allCountries,\r\n        allCountriesSortedByCases: action.payload.sortedCountriesByCases,\r\n        allCountriesloading: false\r\n      };\r\n\r\n    case SET_ALL_COUNTRIES_LOADING:\r\n      return { ...state, allCountriesloading: true };\r\n\r\n    case ERROR:\r\n      return {\r\n        ...state,\r\n        allCountriesError: action.payload,\r\n        allCountriesloading: false\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import {\r\n  SET_CURRENT_COUNTRY,\r\n  SET_CURRENT_COUNTRY_LOADING,\r\n  SET_CURRENT_COUNTRY_ERROR\r\n} from '../Actions/Types';\r\n\r\nconst initialState = {\r\n  currentCountry: null,\r\n  currentCountryLoading: false,\r\n  currentCountryError: null\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_CURRENT_COUNTRY:\r\n      return {\r\n        ...state,\r\n        currentCountry: action.payload,\r\n        currentCountryLoading: false\r\n      };\r\n\r\n    case SET_CURRENT_COUNTRY_LOADING:\r\n      return { ...state, currentCountryLoading: true };\r\n\r\n    case SET_CURRENT_COUNTRY_ERROR:\r\n      return {\r\n        ...state,\r\n        currentCountryError: action.payload,\r\n        currentCountryLoading: false\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import {\r\n  GET_HiSTORY_CURRENT_COUNTRY,\r\n  SET_HiSTORY_CURRENT_COUNTRY_LOADING,\r\n  SET_HiSTORY_CURRENT_COUNTRY_ERROR\r\n} from '../Actions/Types';\r\n\r\nconst initialState = {\r\n  currentCountryHistory: null,\r\n  Dates: null,\r\n  Cases: null,\r\n  Deaths: null,\r\n  Recovered: null,\r\n  currentCountryLoading: false,\r\n  currentCountryError: null\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_HiSTORY_CURRENT_COUNTRY:\r\n      return {\r\n        ...state,\r\n        currentCountryHistory: action.payload.Data,\r\n        Dates: action.payload.Dates,\r\n        Cases: action.payload.Cases,\r\n        Deaths: action.payload.Deaths,\r\n        Recovered: action.payload.Recovered,\r\n        currentCountryLoading: false\r\n      };\r\n\r\n    case SET_HiSTORY_CURRENT_COUNTRY_LOADING:\r\n      return { ...state, currentCountryLoading: true };\r\n\r\n    case SET_HiSTORY_CURRENT_COUNTRY_ERROR:\r\n      return {\r\n        ...state,\r\n        currentCountryError: action.payload,\r\n        currentCountryLoading: false\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport AllCountries from './Countries';\r\nimport CurrentCountryData from './CurrentCountry';\r\nimport DataHistory from './DataHistory';\r\n\r\nexport default combineReducers({\r\n  AllCountries,\r\n  CurrentCountryData,\r\n  DataHistory\r\n});\r\n","// Countries\r\nexport const GET_ALL_COUNTRIES = 'GET_ALL_COUNTRIES';\r\nexport const SET_ALL_COUNTRIES_LOADING = 'SET_ALL_COUNTRIES_LOADING';\r\nexport const ERROR = 'ERROR';\r\n//Current\r\nexport const SET_CURRENT_COUNTRY = 'SET_CURRENT_COUNTRY';\r\nexport const SET_CURRENT_COUNTRY_LOADING = 'SET_CURRENT_COUNTRY_LOADING';\r\nexport const SET_CURRENT_COUNTRY_ERROR = 'SET_CURRENT_COUNTRY_ERROR';\r\n//History\r\nexport const GET_HiSTORY_CURRENT_COUNTRY = 'GET_HiSTORY_CURRENT_COUNTRY';\r\nexport const SET_HiSTORY_CURRENT_COUNTRY_LOADING =\r\n  'SET_HiSTORY_CURRENT_COUNTRY_LOADING';\r\nexport const SET_HiSTORY_CURRENT_COUNTRY_ERROR =\r\n  'SET_HiSTORY_CURRENT_COUNTRY_ERROR';\r\n","import { GET_ALL_COUNTRIES, SET_ALL_COUNTRIES_LOADING, ERROR } from './Types';\r\n\r\n// Get All Countries\r\nexport const getAllCountries = () => async dispatch => {\r\n  try {\r\n    setLoading();\r\n    const res = await fetch('https://corona.lmao.ninja/v2/countries');\r\n    if (!res.ok) {\r\n      dispatch({\r\n        type: ERROR,\r\n        payload: `HTTP Status: ${res.status}`\r\n      });\r\n      throw new Error(`HTTP Status: ${res.status}`);\r\n    }\r\n    const data = await res.json();\r\n    const sortedCountriesByCases = [...data].sort((a, b) => {\r\n      return b.cases - a.cases;\r\n    });\r\n    dispatch({\r\n      type: GET_ALL_COUNTRIES,\r\n      payload: { allCountries: data, sortedCountriesByCases }\r\n    });\r\n  } catch (err) {\r\n    dispatch({ type: ERROR, payload: err.message });\r\n  }\r\n};\r\n\r\nexport const setLoading = () => {\r\n  return { type: SET_ALL_COUNTRIES_LOADING };\r\n};\r\n","import {\r\n  SET_CURRENT_COUNTRY,\r\n  SET_CURRENT_COUNTRY_LOADING,\r\n  SET_CURRENT_COUNTRY_ERROR\r\n} from './Types';\r\n\r\nexport const setCurrentCountry = country => {\r\n  setLoading();\r\n  return { type: SET_CURRENT_COUNTRY, payload: country };\r\n};\r\n\r\nexport const setLoading = () => {\r\n  return { type: SET_CURRENT_COUNTRY_LOADING };\r\n};\r\n","import {\r\n  GET_HiSTORY_CURRENT_COUNTRY,\r\n  SET_HiSTORY_CURRENT_COUNTRY_LOADING,\r\n  SET_HiSTORY_CURRENT_COUNTRY_ERROR\r\n} from './Types';\r\n\r\nexport const getCurrentHistory = country => async dispatch => {\r\n  console.log(country);\r\n\r\n  let Dates = [];\r\n  let Cases = [];\r\n  let Deaths = [];\r\n  let Recovered = [];\r\n\r\n  try {\r\n    setLoading();\r\n    const res = await fetch(\r\n      `https://corona.lmao.ninja/v2/historical/${country}`\r\n    );\r\n    if (!res.ok) {\r\n      dispatch({\r\n        type: SET_HiSTORY_CURRENT_COUNTRY_ERROR,\r\n        payload: `HTTP Status: ${res.status}`\r\n      });\r\n      throw new Error(`HTTP Status: ${res.status}`);\r\n    } else {\r\n      const Data = await res.json();\r\n      for (let [key, value] of Object.entries(Data.timeline.cases)) {\r\n        let newDate = key.split('/');\r\n        Dates.push(`${newDate[1]}/${newDate[0]}`);\r\n        Cases.push(value);\r\n      }\r\n      for (let [key, value] of Object.entries(Data.timeline.deaths)) {\r\n        Deaths.push(value);\r\n      }\r\n      for (let [key, value] of Object.entries(Data.timeline.recovered)) {\r\n        Recovered.push(value);\r\n      }\r\n      if (\r\n        Dates.length > 0 &&\r\n        Cases.length > 0 &&\r\n        Deaths.length > 0 &&\r\n        Recovered.length > 0\r\n      ) {\r\n        dispatch({\r\n          type: GET_HiSTORY_CURRENT_COUNTRY,\r\n          payload: { Data, Dates, Cases, Deaths, Recovered }\r\n        });\r\n      }\r\n    }\r\n  } catch (err) {\r\n    dispatch({ type: SET_HiSTORY_CURRENT_COUNTRY_ERROR, payload: err.message });\r\n  }\r\n};\r\n\r\nexport const setLoading = () => {\r\n  return { type: SET_HiSTORY_CURRENT_COUNTRY_LOADING };\r\n};\r\n","import React from 'react';\r\nimport { components } from 'react-select';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CountriesItem = ({ data, ...props }) => {\r\n  return (\r\n    <div style={{ width: '100% !important', textAlign: 'left !important' }}>\r\n      <components.Option {...props}>\r\n        <img src={data.countryInfo.flag} className='flag' alt={data.country} />\r\n        {data.country}\r\n      </components.Option>\r\n    </div>\r\n  );\r\n};\r\n\r\nCountriesItem.propTypes = {\r\n  data: PropTypes.object.isRequired\r\n};\r\n\r\nexport default CountriesItem;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getAllCountries } from '../../Actions/Countries';\r\nimport { setCurrentCountry } from '../../Actions/CurrentCountry';\r\nimport { getCurrentHistory } from '../../Actions/DataHistory';\r\nimport moment from 'moment';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport AsyncSelect from 'react-select/async';\r\nimport CountriesItem from './CountriesItem';\r\nimport PropTypes from 'prop-types';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nconst Countries = ({\r\n  AllCountriesData: { allCountriesData, allCountriesloading },\r\n  getAllCountries,\r\n  setCurrentCountry,\r\n  getCurrentHistory\r\n}) => {\r\n  useEffect(() => {\r\n    getAllCountries();\r\n  }, [getAllCountries]);\r\n\r\n  const [, setInputValue] = useState('');\r\n  const [updateTime, setUpdateTime] = useState(0);\r\n\r\n  const filterCountrie = inputValue => {\r\n    if (!allCountriesloading && allCountriesData !== null)\r\n      return allCountriesData.filter(c =>\r\n        c.country.toLowerCase().includes(inputValue.toLowerCase())\r\n      );\r\n  };\r\n\r\n  const loadOptions = (InputValue, callback) => {\r\n    callback(filterCountrie(InputValue));\r\n  };\r\n\r\n  const handleInputChange = newValue => {\r\n    const inputValue = newValue.replace(/\\W/g, '');\r\n    setInputValue({ inputValue });\r\n    return inputValue;\r\n  };\r\n\r\n  const onChange = e => {\r\n    if (e !== null) {\r\n      const {\r\n        updated,\r\n        country,\r\n        countryInfo: { flag, lat, long },\r\n        cases,\r\n        todayCases,\r\n        deaths,\r\n        todayDeaths,\r\n        recovered,\r\n        active,\r\n        critical,\r\n        tests\r\n      } = e;\r\n      //   Set Current country\r\n      setCurrentCountry({\r\n        updated,\r\n        country,\r\n        flag,\r\n        lat,\r\n        long,\r\n        cases,\r\n        todayCases,\r\n        deaths,\r\n        todayDeaths,\r\n        recovered,\r\n        active,\r\n        critical,\r\n        tests\r\n      });\r\n\r\n      getCurrentHistory(country);\r\n    } else {\r\n      setCurrentCountry(null);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col xs='12' sm='12' md='12' lg='12' xl='12'>\r\n          <div className='countriesSection'>\r\n            <div className='countriesDopdown'>\r\n              {/* <p>Selected Country: {`${SelectedCountry}`}</p> */}\r\n              {allCountriesloading || allCountriesData === null ? (\r\n                <div className='Spinner'>\r\n                  <Spinner animation='border' role='status' variant='success'>\r\n                    <span className='sr-only'>Loading...</span>\r\n                  </Spinner>\r\n                </div>\r\n              ) : (\r\n                <div>\r\n                  <AsyncSelect\r\n                    placeholder='Search or Select Countrie ...'\r\n                    options={allCountriesData}\r\n                    getOptionLabel={option => {\r\n                      return (\r\n                        <div>\r\n                          <img\r\n                            src={option.countryInfo.flag}\r\n                            className='flag'\r\n                            alt={option.country}\r\n                          />\r\n                          {`${option.country}`}\r\n                        </div>\r\n                      );\r\n                    }}\r\n                    getOptionValue={option => option}\r\n                    cacheOptions\r\n                    loadOptions={loadOptions}\r\n                    defaultOptions\r\n                    onInputChange={handleInputChange}\r\n                    onChange={onChange}\r\n                    components={{ Option: CountriesItem }}\r\n                    className='searchBox'\r\n                    autoFocus={true}\r\n                    isClearable={true}\r\n                    // menuIsOpen={true}\r\n                  />\r\n                  <p className='lastUpdate'>\r\n                    <i className='far fa-clock' />\r\n                    Last update:\r\n                    <span>\r\n                      {allCountriesData[0].updated > 0 &&\r\n                        moment(allCountriesData[0].updated).fromNow()}\r\n                    </span>\r\n                  </p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nCountries.prototype = {\r\n  allCountriesData: PropTypes.object,\r\n  allCountriesloading: PropTypes.bool.isRequired,\r\n  getAllCountries: PropTypes.func.isRequired,\r\n  setCurrentCountry: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  AllCountriesData: state.AllCountries\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  getAllCountries,\r\n  setCurrentCountry,\r\n  getCurrentHistory\r\n})(Countries);\r\n","import React from 'react';\r\nimport moment from 'moment';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ContriesListItem = ({\r\n  country: {\r\n    updated,\r\n    country,\r\n    countryInfo: { flag },\r\n    cases,\r\n    todayCases,\r\n    deaths,\r\n    todayDeaths,\r\n    recovered,\r\n    active,\r\n    critical,\r\n    tests\r\n  }\r\n}) => {\r\n  return (\r\n    <div className='CountryListItem'>\r\n      <div className='flagAndTitle'>\r\n        <img src={flag} alt={country} />\r\n        <p className='CountryName'>{country}</p>\r\n      </div>\r\n\r\n      <div className='CDR'>\r\n        <OverlayTrigger\r\n          key='Cases'\r\n          placement='bottom'\r\n          overlay={\r\n            <Tooltip className='myToolTip' id='tooltip-bottom'>\r\n              Confirmed Cases\r\n            </Tooltip>\r\n          }>\r\n          <div className='Cases'>\r\n            <i className='fas fa-users'></i>\r\n            {cases.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}\r\n            {todayCases > 0 && (\r\n              <span className='todayResults'>\r\n                +\r\n                {todayCases\r\n                  .toString()\r\n                  .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}\r\n              </span>\r\n            )}\r\n          </div>\r\n        </OverlayTrigger>\r\n\r\n        <OverlayTrigger\r\n          key='Deaths'\r\n          placement='bottom'\r\n          overlay={\r\n            <Tooltip className='myToolTip' id='tooltip-bottom'>\r\n              Confirmed Deaths\r\n            </Tooltip>\r\n          }>\r\n          <div className='Deaths'>\r\n            <i className='fas fa-skull'></i>\r\n            {deaths.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}\r\n            {todayDeaths > 0 && (\r\n              <span className='todayResults'>\r\n                +\r\n                {todayDeaths\r\n                  .toString()\r\n                  .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}\r\n              </span>\r\n            )}\r\n          </div>\r\n        </OverlayTrigger>\r\n\r\n        <OverlayTrigger\r\n          key='Recovered'\r\n          placement='bottom'\r\n          overlay={\r\n            <Tooltip className='myToolTip' id='tooltip-bottom'>\r\n              Confirmed Recovered\r\n            </Tooltip>\r\n          }>\r\n          <div className='Recovered'>\r\n            <i className='fas fa-hospital-user'></i>\r\n            {recovered.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}\r\n          </div>\r\n        </OverlayTrigger>\r\n\r\n        <OverlayTrigger\r\n          key='Tests'\r\n          placement='bottom'\r\n          overlay={\r\n            <Tooltip className='myToolTip' id='tooltip-bottom'>\r\n              Confirmed Tests\r\n            </Tooltip>\r\n          }>\r\n          <div className='Tests'>\r\n            <i className='fas fa-vial'></i>\r\n            {tests.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}\r\n          </div>\r\n        </OverlayTrigger>\r\n\r\n        {/* <p className='lastUpdateList'>\r\n          <i className='far fa-clock' />\r\n          Last update:<span>{moment(updated).fromNow()}.</span>\r\n        </p> */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nContriesListItem.propTypes = {\r\n  country: PropTypes.object.isRequired\r\n};\r\n\r\nexport default ContriesListItem;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ContriesListItem from './ContriesListItem';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AllCountriesList = ({\r\n  AllCountriesData: {\r\n    allCountriesData,\r\n    allCountriesSortedByCases,\r\n    allCountriesloading\r\n  }\r\n}) => {\r\n  return (\r\n    <div>\r\n      {allCountriesData === null || allCountriesloading ? (\r\n        <div className='Spinner'>\r\n          <Spinner animation='border' role='status' variant='success'>\r\n            <span className='sr-only'>Loading...</span>\r\n          </Spinner>\r\n        </div>\r\n      ) : (\r\n        allCountriesSortedByCases.map((country, id) => (\r\n          <ContriesListItem country={country} key={id} id={id} />\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nAllCountriesList.prototype = {\r\n  allCountriesData: PropTypes.array,\r\n  allCountriesSortedByCases: PropTypes.array,\r\n  allCountriesloading: PropTypes.bool.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  AllCountriesData: state.AllCountries\r\n});\r\n\r\nexport default connect(mapStateToProps)(AllCountriesList);\r\n","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ReactMapGL, { FlyToInterpolator, Marker, Popup } from 'react-map-gl';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport PropTypes from 'prop-types';\r\n\r\nlet apiKey;\r\nprocess.env.NODE_ENV\r\n  ? (apiKey = process.env.REACT_APP_API_KEY)\r\n  : (apiKey = process.env.API_KEY);\r\n\r\nconst GlobalMap = ({\r\n  CurrentCountryData: { currentCountry, currentCountryLoading },\r\n  AllCountriesData: { allCountriesData, allCountriesloading }\r\n}) => {\r\n  const [viewPort, setViewPort] = useState({\r\n    width: '100%',\r\n    height: '100%'\r\n  });\r\n  const [popupState, setPopupState] = useState({\r\n    state: false,\r\n    lat: 16,\r\n    long: 27\r\n  });\r\n\r\n  useEffect(() => {\r\n    currentCountry !== null && !currentCountryLoading\r\n      ? setViewPort({\r\n          ...viewPort,\r\n          latitude: currentCountry.lat,\r\n          longitude: currentCountry.long,\r\n          zoom: 3.5,\r\n          transitionDuration: 3000,\r\n          transitionInterpolator: new FlyToInterpolator()\r\n        })\r\n      : setViewPort({\r\n          ...viewPort,\r\n          latitude: 16,\r\n          longitude: 27,\r\n          zoom: 1.3,\r\n          transitionDuration: 3000,\r\n          transitionInterpolator: new FlyToInterpolator()\r\n        });\r\n    // eslint-disable-next-line\r\n  }, [currentCountry, currentCountryLoading]);\r\n\r\n  return (\r\n    <>\r\n      {allCountriesData === null || allCountriesloading ? (\r\n        <div className='Spinner'>\r\n          <Spinner animation='border' role='status' variant='success'>\r\n            <span className='sr-only'>Loading...</span>\r\n          </Spinner>\r\n        </div>\r\n      ) : (\r\n        <ReactMapGL\r\n          className='map'\r\n          {...viewPort}\r\n          mapboxApiAccessToken={apiKey}\r\n          mapStyle='mapbox://styles/mapbox/dark-v10'\r\n          onViewportChange={viewPort => {\r\n            setViewPort(viewPort);\r\n          }}>\r\n          {allCountriesData.map((country, id) => (\r\n            <Marker\r\n              key={id}\r\n              latitude={country.countryInfo.lat}\r\n              longitude={country.countryInfo.long}\r\n              offsetTop={-15}\r\n              offsetLeft={-5}>\r\n              <i\r\n                className='fas fa-circle circle'\r\n                onMouseEnter={() =>\r\n                  setPopupState({\r\n                    state: true,\r\n                    name: country.country,\r\n                    flag: country.countryInfo.flag,\r\n                    cases: country.cases,\r\n                    deaths: country.deaths,\r\n                    recovered: country.recovered,\r\n                    lat: country.countryInfo.lat,\r\n                    long: country.countryInfo.long\r\n                  })\r\n                }\r\n                onMouseLeave={() =>\r\n                  setPopupState({ ...popupState, state: false })\r\n                }></i>\r\n            </Marker>\r\n          ))}\r\n          {popupState.state && (\r\n            <Popup\r\n              latitude={popupState.lat}\r\n              longitude={popupState.long}\r\n              closeButton={false}\r\n              offsetTop={-10}\r\n              offsetLeft={-5}\r\n              className='popupup'\r\n              onClose={() => {\r\n                setPopupState({ ...popupState, state: false });\r\n              }}>\r\n              <div>\r\n                <h6 className='popupHeader'>\r\n                  <img\r\n                    src={popupState.flag}\r\n                    alt='flag'\r\n                    style={{ width: '60px' }}\r\n                  />\r\n                  {popupState.name}\r\n                </h6>\r\n                <p className='popupCases'>Cases: {popupState.cases}</p>\r\n                <p className='popupDeaths'>Deaths: {popupState.deaths}</p>\r\n                <p className='popupRecovered'>\r\n                  Recovered: {popupState.recovered}\r\n                </p>\r\n              </div>\r\n            </Popup>\r\n          )}\r\n        </ReactMapGL>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nGlobalMap.prototype = {\r\n  currentCountry: PropTypes.object,\r\n  currentCountryLoading: PropTypes.bool,\r\n  allCountriesData: PropTypes.object,\r\n  allCountriesloading: PropTypes.bool\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  CurrentCountryData: state.CurrentCountryData,\r\n  AllCountriesData: state.AllCountries\r\n});\r\n\r\nexport default connect(mapStateToProps)(GlobalMap);\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport { connect } from 'react-redux';\r\n// import Chart from 'chart.js';\r\nimport { Line } from 'react-chartjs-2';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CurrentCountryStats = ({\r\n  // CurrentCountryData: { currentCountry, currentCountryLoading },\r\n  DataHistory: { Dates, Cases, Deaths, Recovered, currentCountryLoading }\r\n}) => {\r\n  const chartContainer = useRef(null);\r\n  const [chartInstance, setChartInstance] = useState(null);\r\n\r\n  return (\r\n    // <canvas id='chartJS' />\r\n    <>\r\n      {currentCountryLoading || Dates === null ? (\r\n        <div className='Spinner'>\r\n          <Spinner animation='border' role='status' variant='success'>\r\n            <span className='sr-only'>Loading...</span>\r\n          </Spinner>\r\n        </div>\r\n      ) : (\r\n        <Line\r\n          className='Line'\r\n          data={{\r\n            labels: Dates,\r\n            datasets: [\r\n              {\r\n                // radius: 0,\r\n                label: \"Cases\",\r\n                data: Cases,\r\n                fill: false,\r\n                borderColor: '#fca903',\r\n                backgroundColor: '#fca903'\r\n              },\r\n              {\r\n                label: 'Deaths',\r\n                data: Deaths,\r\n                fill: false,\r\n                borderColor: '#d14356',\r\n                backgroundColor: '#d14356'\r\n              },\r\n              {\r\n                label: 'Recovered',\r\n                data: Recovered,\r\n                fill: false,\r\n                borderColor: '#49d170',\r\n                backgroundColor: '#49d170'\r\n              }\r\n            ]\r\n          }}\r\n          options={{\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n            tooltips: {\r\n              enabled: true,\r\n              callbacks: {\r\n                label: (tooltipItem, data) => {\r\n                  var label =\r\n                    data.datasets[tooltipItem.datasetIndex].label || '';\r\n\r\n                  if (label) {\r\n                    label += ':';\r\n                  }\r\n                  label += Math.round(tooltipItem.yLabel * 100) / 100;\r\n                  return label;\r\n                }\r\n              }\r\n            },\r\n            scales: {\r\n              xAxes: [\r\n                {\r\n                  gridLines: {\r\n                    display: false\r\n                  }\r\n                }\r\n              ],\r\n              yAxes: [\r\n                {\r\n                  gridLines: {\r\n                    display: true\r\n                  },\r\n                  ticks: {\r\n                    beginAtZero: true\r\n                  }\r\n                }\r\n              ]\r\n            }\r\n          }}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nCurrentCountryStats.propTypes = {\r\n  currentCountry: PropTypes.object\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  CurrentCountryData: state.CurrentCountryData,\r\n  DataHistory: state.DataHistory\r\n});\r\n\r\nexport default connect(mapStateToProps)(CurrentCountryStats);\r\n","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport AllCountriesList from './AllCountriesList';\r\nimport CurrentCountryStats from './CurrentCountryStats';\r\nimport GlobalMap from '../Map/GlobalMap';\r\n\r\nconst MidSectionContainer = () => {\r\n  return (\r\n    <Container className='MidSection' fluid>\r\n      <Row>\r\n        <Col xs='12' sm='12' md='12' lg='12' xl='12'>\r\n          <div className='GlobalMap'>\r\n            <GlobalMap />\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col xs='12' sm='12' md='6' lg='5' xl='5'>\r\n          <div className='AllCountriesList'>\r\n            <AllCountriesList />\r\n          </div>\r\n        </Col>\r\n        <Col xs='12' sm='12' md='6' lg='7' xl='7'>\r\n          <div className='currentCountryStates'>\r\n            <CurrentCountryStats />\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default MidSectionContainer;\r\n","import React, { useEffect } from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Container from 'react-bootstrap/Container';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\n\r\nconst NavComp = () => {\r\n  useEffect(() => {\r\n\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <Navbar className='Navbar' variant='light' expand='lg' sticky='top'>\r\n        <Container>\r\n          <OverlayTrigger\r\n            placement='bottom'\r\n            delay={{ show: 150, hide: 150 }}\r\n            overlay={<Tooltip className='myToolTip'>Covid-19 Update</Tooltip>}>\r\n            <Navbar.Brand href='#home' className='title'>\r\n              <i className='fas fa-lungs-virus' /> Covid-19 Update\r\n            </Navbar.Brand>\r\n          </OverlayTrigger>\r\n\r\n          <Navbar.Toggle aria-controls='basic-navbar-nav' />\r\n          <Navbar.Collapse id='basic-navbar-nav'>\r\n            <Nav className='mr-auto justify-content-end navWidth'>\r\n              <Nav.Link href='#home'>\r\n                <i className='fas fa-home navIcons'></i>\r\n                {window.innerWidth<992 && <span className=\"navIconsSpan\">Home</span>}\r\n              </Nav.Link>\r\n              <OverlayTrigger\r\n                placement='bottom'\r\n                delay={{ show: 150, hide: 150 }}\r\n                overlay={\r\n                  <Tooltip className='myToolTip'>Github Repositorie</Tooltip>\r\n                }>\r\n                <Nav.Link\r\n                  href='https://github.com/MedElBoudali/Coronavirus-Update'\r\n                  target='_blank'>\r\n                  <i className='fab fa-github navIcons'></i>\r\n                  {window.innerWidth<992 && <span className=\"navIconsSpan\">Github Repositorie</span>}\r\n                </Nav.Link>\r\n              </OverlayTrigger>\r\n\r\n              <OverlayTrigger\r\n                placement='bottom'\r\n                delay={{ show: 150, hide: 150 }}\r\n                overlay={\r\n                  <Tooltip className='myToolTip'>\r\n                    World Health Organization\r\n                  </Tooltip>\r\n                }>\r\n                <Nav.Link href='https://www.who.int/' target='_blank'>\r\n                  <i className='fas fa-laptop-medical navIcons'></i>\r\n                  {window.innerWidth<992 && <span className=\"navIconsSpan\">World Health Organization</span>}\r\n                </Nav.Link>\r\n              </OverlayTrigger>\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavComp;\r\n","import React, { Fragment } from 'react';\r\nimport Countries from '../Components/TopSection/Countries';\r\nimport MidSectionContainer from '../Components/MidSection/MidSectionContainer';\r\nimport Navbar from '../Layouts/Navbar';\r\n\r\nconst Home = () => {\r\n  return (\r\n    <Fragment>\r\n      <Navbar />\r\n        <Countries />\r\n        <MidSectionContainer />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\nimport Home from './Pages/Home';\n\nfunction App() {\n  return <Home />;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './Reducers';\nimport './Assets/Style/App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nReactDOM.render(\n  <Provider\n    store={createStore(\n      rootReducer,\n      initialState,\n      composeWithDevTools(applyMiddleware(...middleware))\n    )}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}